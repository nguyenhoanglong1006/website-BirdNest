{"ast":null,"code":"'use strict';\n\nvar bind = require('function-bind');\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar setFunctionLength = require('set-function-length');\n\nvar $TypeError = require('es-errors/type');\n\nvar $apply = GetIntrinsic('%Function.prototype.apply%');\nvar $call = GetIntrinsic('%Function.prototype.call%');\nvar $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);\n\nvar $defineProperty = require('es-define-property');\n\nvar $max = GetIntrinsic('%Math.max%');\n\nmodule.exports = function callBind(originalFunction) {\n  if (typeof originalFunction !== 'function') {\n    throw new $TypeError('a function is required');\n  }\n\n  var func = $reflectApply(bind, $call, arguments);\n  return setFunctionLength(func, 1 + $max(0, originalFunction.length - (arguments.length - 1)), true);\n};\n\nvar applyBind = function applyBind() {\n  return $reflectApply(bind, $apply, arguments);\n};\n\nif ($defineProperty) {\n  $defineProperty(module.exports, 'apply', {\n    value: applyBind\n  });\n} else {\n  module.exports.apply = applyBind;\n}","map":null,"metadata":{},"sourceType":"script"}