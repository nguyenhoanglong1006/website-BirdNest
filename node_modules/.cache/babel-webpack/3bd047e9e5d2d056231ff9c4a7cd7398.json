{"ast":null,"code":"/* jshint bitwise: false */\n\"use strict\";\n\nmodule.exports = CharacterData;\n\nvar Leaf = require('./Leaf');\n\nvar utils = require('./utils');\n\nvar ChildNode = require('./ChildNode');\n\nvar NonDocumentTypeChildNode = require('./NonDocumentTypeChildNode');\n\nfunction CharacterData() {\n  Leaf.call(this);\n}\n\nCharacterData.prototype = Object.create(Leaf.prototype, {\n  // DOMString substringData(unsigned long offset,\n  //               unsigned long count);\n  // The substringData(offset, count) method must run these steps:\n  //\n  //     If offset is greater than the context object's\n  //     length, throw an INDEX_SIZE_ERR exception and\n  //     terminate these steps.\n  //\n  //     If offset+count is greater than the context\n  //     object's length, return a DOMString whose value is\n  //     the UTF-16 code units from the offsetth UTF-16 code\n  //     unit to the end of data.\n  //\n  //     Return a DOMString whose value is the UTF-16 code\n  //     units from the offsetth UTF-16 code unit to the\n  //     offset+countth UTF-16 code unit in data.\n  substringData: {\n    value: function substringData(offset, count) {\n      if (arguments.length < 2) {\n        throw new TypeError(\"Not enough arguments\");\n      } // Convert arguments to WebIDL \"unsigned long\"\n\n\n      offset = offset >>> 0;\n      count = count >>> 0;\n\n      if (offset > this.data.length || offset < 0 || count < 0) {\n        utils.IndexSizeError();\n      }\n\n      return this.data.substring(offset, offset + count);\n    }\n  },\n  // void appendData(DOMString data);\n  // The appendData(data) method must append data to the context\n  // object's data.\n  appendData: {\n    value: function appendData(data) {\n      if (arguments.length < 1) {\n        throw new TypeError(\"Not enough arguments\");\n      }\n\n      this.data += String(data);\n    }\n  },\n  // void insertData(unsigned long offset, DOMString data);\n  // The insertData(offset, data) method must run these steps:\n  //\n  //     If offset is greater than the context object's\n  //     length, throw an INDEX_SIZE_ERR exception and\n  //     terminate these steps.\n  //\n  //     Insert data into the context object's data after\n  //     offset UTF-16 code units.\n  //\n  insertData: {\n    value: function insertData(offset, data) {\n      return this.replaceData(offset, 0, data);\n    }\n  },\n  // void deleteData(unsigned long offset, unsigned long count);\n  // The deleteData(offset, count) method must run these steps:\n  //\n  //     If offset is greater than the context object's\n  //     length, throw an INDEX_SIZE_ERR exception and\n  //     terminate these steps.\n  //\n  //     If offset+count is greater than the context\n  //     object's length var count be length-offset.\n  //\n  //     Starting from offset UTF-16 code units remove count\n  //     UTF-16 code units from the context object's data.\n  deleteData: {\n    value: function deleteData(offset, count) {\n      return this.replaceData(offset, count, '');\n    }\n  },\n  // void replaceData(unsigned long offset, unsigned long count,\n  //          DOMString data);\n  //\n  // The replaceData(offset, count, data) method must act as\n  // if the deleteData() method is invoked with offset and\n  // count as arguments followed by the insertData() method\n  // with offset and data as arguments and re-throw any\n  // exceptions these methods might have thrown.\n  replaceData: {\n    value: function replaceData(offset, count, data) {\n      var curtext = this.data,\n          len = curtext.length; // Convert arguments to correct WebIDL type\n\n      offset = offset >>> 0;\n      count = count >>> 0;\n      data = String(data);\n      if (offset > len || offset < 0) utils.IndexSizeError();\n      if (offset + count > len) count = len - offset;\n      var prefix = curtext.substring(0, offset),\n          suffix = curtext.substring(offset + count);\n      this.data = prefix + data + suffix;\n    }\n  },\n  // Utility method that Node.isEqualNode() calls to test Text and\n  // Comment nodes for equality.  It is okay to put it here, since\n  // Node will have already verified that nodeType is equal\n  isEqual: {\n    value: function isEqual(n) {\n      return this._data === n._data;\n    }\n  },\n  length: {\n    get: function get() {\n      return this.data.length;\n    }\n  }\n});\nObject.defineProperties(CharacterData.prototype, ChildNode);\nObject.defineProperties(CharacterData.prototype, NonDocumentTypeChildNode);","map":null,"metadata":{},"sourceType":"script"}