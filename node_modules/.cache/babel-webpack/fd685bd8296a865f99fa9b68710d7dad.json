{"ast":null,"code":"import _classCallCheck from \"/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __decorate, __metadata, __param } from 'tslib';\nimport { isPlatformServer } from '@angular/common';\nimport { EventEmitter, Input, Output, Directive, Inject, PLATFORM_ID, Optional, ElementRef, NgZone, NgModule } from '@angular/core';\nimport { Subject, Observable, of, ReplaySubject, empty } from 'rxjs';\nimport { filter, take, mergeMap, tap, map, catchError, switchMap, sampleTime, share, startWith } from 'rxjs/operators';\nimport * as Éµngcc0 from '@angular/core';\nvar cssClassNames = {\n  loaded: 'ng-lazyloaded',\n  loading: 'ng-lazyloading',\n  failed: 'ng-failed-lazyloaded'\n};\n\nfunction removeCssClassName(element, cssClassName) {\n  element.className = element.className.replace(cssClassName, '');\n}\n\nfunction addCssClassName(element, cssClassName) {\n  if (!element.className.includes(cssClassName)) {\n    element.className += \" \".concat(cssClassName);\n  }\n}\n\nfunction hasCssClassName(element, cssClassName) {\n  return element.className && element.className.includes(cssClassName);\n}\n\nfunction getNavigator() {\n  return typeof window !== 'undefined' ? window.navigator : undefined;\n}\n\nfunction isChildOfPicture(element) {\n  return Boolean(element.parentElement && element.parentElement.nodeName.toLowerCase() === 'picture');\n}\n\nfunction isImageElement(element) {\n  return element.nodeName.toLowerCase() === 'img';\n}\n\nfunction setImage(element, imagePath, useSrcset) {\n  if (isImageElement(element)) {\n    if (useSrcset && 'srcset' in element) {\n      element.srcset = imagePath;\n    } else {\n      element.src = imagePath;\n    }\n  } else {\n    element.style.backgroundImage = \"url('\".concat(imagePath, \"')\");\n  }\n\n  return element;\n}\n\nfunction setSources(attrName) {\n  return function (image) {\n    var sources = image.parentElement.getElementsByTagName('source');\n\n    for (var i = 0; i < sources.length; i++) {\n      var attrValue = sources[i].getAttribute(attrName);\n\n      if (attrValue) {\n        // Check if `srcset` is supported by the current browser\n        if ('srcset' in sources[i]) {\n          sources[i].srcset = attrValue;\n        } else {\n          sources[i].src = attrValue;\n        }\n      }\n    }\n  };\n}\n\nvar setSourcesToDefault = setSources('defaultImage');\nvar setSourcesToLazy = setSources('lazyLoad');\nvar setSourcesToError = setSources('errorImage');\n\nfunction setImageAndSources(setSourcesFn) {\n  return function (element, imagePath, useSrcset) {\n    if (isImageElement(element) && isChildOfPicture(element)) {\n      setSourcesFn(element);\n    }\n\n    if (imagePath) {\n      setImage(element, imagePath, useSrcset);\n    }\n  };\n}\n\nvar setImageAndSourcesToDefault = setImageAndSources(setSourcesToDefault);\nvar setImageAndSourcesToLazy = setImageAndSources(setSourcesToLazy);\nvar setImageAndSourcesToError = setImageAndSources(setSourcesToError);\n\nvar end = function end(_ref) {\n  var element = _ref.element;\n  return addCssClassName(element, cssClassNames.loaded);\n};\n\nvar loadImage = function loadImage(_ref2) {\n  var element = _ref2.element,\n      useSrcset = _ref2.useSrcset,\n      imagePath = _ref2.imagePath,\n      decode = _ref2.decode;\n  var img;\n\n  if (isImageElement(element) && isChildOfPicture(element)) {\n    var parentClone = element.parentNode.cloneNode(true);\n    img = parentClone.getElementsByTagName('img')[0];\n    setSourcesToLazy(img);\n    setImage(img, imagePath, useSrcset);\n  } else {\n    img = new Image();\n\n    if (isImageElement(element) && element.sizes) {\n      img.sizes = element.sizes;\n    }\n\n    if (useSrcset && 'srcset' in img) {\n      img.srcset = imagePath;\n    } else {\n      img.src = imagePath;\n    }\n  }\n\n  if (decode && img.decode) {\n    return img.decode().then(function () {\n      return imagePath;\n    });\n  }\n\n  return new Promise(function (resolve, reject) {\n    img.onload = function () {\n      return resolve(imagePath);\n    };\n\n    img.onerror = function () {\n      return reject(null);\n    };\n  });\n};\n\nvar setErrorImage = function setErrorImage(_ref3) {\n  var element = _ref3.element,\n      errorImagePath = _ref3.errorImagePath,\n      useSrcset = _ref3.useSrcset;\n  setImageAndSourcesToError(element, errorImagePath, useSrcset);\n  addCssClassName(element, cssClassNames.failed);\n};\n\nvar setLoadedImage = function setLoadedImage(_ref4) {\n  var element = _ref4.element,\n      imagePath = _ref4.imagePath,\n      useSrcset = _ref4.useSrcset;\n  setImageAndSourcesToLazy(element, imagePath, useSrcset);\n};\n\nvar setup = function setup(_ref5) {\n  var element = _ref5.element,\n      defaultImagePath = _ref5.defaultImagePath,\n      useSrcset = _ref5.useSrcset;\n  setImageAndSourcesToDefault(element, defaultImagePath, useSrcset);\n\n  if (hasCssClassName(element, cssClassNames.loaded)) {\n    removeCssClassName(element, cssClassNames.loaded);\n  }\n};\n\nvar isBot = function isBot(navigator) {\n  if (navigator && navigator.userAgent) {\n    return /googlebot|bingbot|yandex|baiduspider|facebookexternalhit|twitterbot|rogerbot|linkedinbot|embedly|quora\\ link\\ preview|showyoubot|outbrain|pinterest\\/0\\.|pinterestbot|slackbot|vkShare|W3C_Validator|whatsapp|duckduckbot/i.test(navigator.userAgent);\n  }\n\n  return false;\n};\n\nvar sharedPreset = {\n  finally: end,\n  loadImage: loadImage,\n  setErrorImage: setErrorImage,\n  setLoadedImage: setLoadedImage,\n  setup: setup,\n  isBot: isBot\n};\nvar observers = new WeakMap();\nvar intersectionSubject = new Subject();\n\nfunction loadingCallback(entrys) {\n  entrys.forEach(function (entry) {\n    return intersectionSubject.next(entry);\n  });\n}\n\nvar uniqKey = {};\n\nvar getIntersectionObserver = function getIntersectionObserver(attributes) {\n  var scrollContainerKey = attributes.scrollContainer || uniqKey;\n  var options = {\n    root: attributes.scrollContainer || null\n  };\n\n  if (attributes.offset) {\n    options.rootMargin = \"\".concat(attributes.offset, \"px\");\n  }\n\n  var observer = observers.get(scrollContainerKey);\n\n  if (!observer) {\n    observer = new IntersectionObserver(loadingCallback, options);\n    observers.set(scrollContainerKey, observer);\n  }\n\n  observer.observe(attributes.element);\n  return Observable.create(function (obs) {\n    var subscription = intersectionSubject.pipe(filter(function (entry) {\n      return entry.target === attributes.element;\n    })).subscribe(obs);\n    return function () {\n      subscription.unsubscribe();\n      observer.unobserve(attributes.element);\n    };\n  });\n};\n\nvar isVisible = function isVisible(_ref6) {\n  var event = _ref6.event;\n  return event.isIntersecting;\n};\n\nvar getObservable = function getObservable(attributes) {\n  var _getInterObserver = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getIntersectionObserver;\n\n  if (attributes.customObservable) {\n    return attributes.customObservable;\n  }\n\n  return _getInterObserver(attributes);\n};\n\nvar intersectionObserverPreset = Object.assign({}, sharedPreset, {\n  isVisible: isVisible,\n  getObservable: getObservable\n});\n\nvar isVisible$1 = function isVisible$1() {\n  return true;\n};\n\nvar getObservable$1 = function getObservable$1() {\n  return of('load');\n};\n\nvar loadImage$1 = function loadImage$1(_ref7) {\n  var imagePath = _ref7.imagePath;\n  return [imagePath];\n};\n\nvar ssrPreset = Object.assign({}, sharedPreset, {\n  isVisible: isVisible$1,\n  getObservable: getObservable$1,\n  loadImage: loadImage$1\n});\n\nfunction createHooks(platformId, options) {\n  var defaultPreset = intersectionObserverPreset;\n  var isBot = options && options.isBot ? options.isBot : defaultPreset.isBot;\n\n  if (isBot(getNavigator(), platformId)) {\n    return Object.assign(ssrPreset, {\n      isBot: isBot\n    });\n  } else if (!options) {\n    return defaultPreset;\n  }\n\n  var hooks = {};\n\n  if (options.preset) {\n    Object.assign(hooks, options.preset);\n  } else {\n    Object.assign(hooks, defaultPreset);\n  }\n\n  Object.keys(options).filter(function (key) {\n    return key !== 'preset';\n  }).forEach(function (key) {\n    hooks[key] = options[key];\n  });\n  return hooks;\n}\n\nfunction lazyLoadImage(hookSet, attributes) {\n  return function (evntObservable) {\n    return evntObservable.pipe(filter(function (event) {\n      return hookSet.isVisible({\n        element: attributes.element,\n        event: event,\n        offset: attributes.offset,\n        scrollContainer: attributes.scrollContainer\n      });\n    }), take(1), mergeMap(function () {\n      return hookSet.loadImage(attributes);\n    }), tap(function (imagePath) {\n      return hookSet.setLoadedImage({\n        element: attributes.element,\n        imagePath: imagePath,\n        useSrcset: attributes.useSrcset\n      });\n    }), map(function () {\n      return true;\n    }), catchError(function () {\n      hookSet.setErrorImage(attributes);\n      return of(false);\n    }), tap(function () {\n      return hookSet.finally(attributes);\n    }));\n  };\n}\n\nvar LazyLoadImageDirective = /*#__PURE__*/function () {\n  function LazyLoadImageDirective(el, ngZone, platformId, options) {\n    _classCallCheck(this, LazyLoadImageDirective);\n\n    this.onLoad = new EventEmitter(); // Callback when an image is loaded\n\n    this.elementRef = el;\n    this.ngZone = ngZone;\n    this.propertyChanges$ = new ReplaySubject();\n    this.platformId = platformId;\n    this.hooks = createHooks(platformId, options);\n  }\n\n  return _createClass(LazyLoadImageDirective, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      this.propertyChanges$.next({\n        element: this.elementRef.nativeElement,\n        imagePath: this.lazyImage,\n        defaultImagePath: this.defaultImage,\n        errorImagePath: this.errorImage,\n        useSrcset: this.useSrcset,\n        offset: this.offset ? this.offset | 0 : 0,\n        scrollContainer: this.scrollTarget,\n        customObservable: this.customObservable,\n        decode: this.decode\n      });\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this = this;\n\n      // Don't do anything if SSR and the user isn't a bot\n      if (isPlatformServer(this.platformId) && !this.hooks.isBot(getNavigator(), this.platformId)) {\n        return null;\n      }\n\n      this.ngZone.runOutsideAngular(function () {\n        _this.scrollSubscription = _this.propertyChanges$.pipe(tap(function (attributes) {\n          return _this.hooks.setup(attributes);\n        }), switchMap(function (attributes) {\n          return _this.hooks.getObservable(attributes).pipe(lazyLoadImage(_this.hooks, attributes));\n        })).subscribe(function (success) {\n          return _this.onLoad.emit(success);\n        });\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.scrollSubscription) {\n        this.scrollSubscription.unsubscribe();\n      }\n    }\n  }]);\n}();\n\nLazyLoadImageDirective.Éµfac = function LazyLoadImageDirective_Factory(t) {\n  return new (t || LazyLoadImageDirective)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone), Éµngcc0.ÉµÉµdirectiveInject(PLATFORM_ID), Éµngcc0.ÉµÉµdirectiveInject('options', 8));\n};\n\nLazyLoadImageDirective.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: LazyLoadImageDirective,\n  selectors: [[\"\", \"lazyLoad\", \"\"]],\n  inputs: {\n    lazyImage: [\"lazyLoad\", \"lazyImage\"],\n    defaultImage: \"defaultImage\",\n    errorImage: \"errorImage\",\n    scrollTarget: \"scrollTarget\",\n    customObservable: \"customObservable\",\n    offset: \"offset\",\n    useSrcset: \"useSrcset\",\n    decode: \"decode\"\n  },\n  outputs: {\n    onLoad: \"onLoad\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature]\n});\n\n__decorate([Input('lazyLoad'), __metadata(\"design:type\", String)], LazyLoadImageDirective.prototype, \"lazyImage\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], LazyLoadImageDirective.prototype, \"defaultImage\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], LazyLoadImageDirective.prototype, \"errorImage\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], LazyLoadImageDirective.prototype, \"scrollTarget\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Observable)], LazyLoadImageDirective.prototype, \"customObservable\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], LazyLoadImageDirective.prototype, \"offset\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Boolean)], LazyLoadImageDirective.prototype, \"useSrcset\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Boolean)], LazyLoadImageDirective.prototype, \"decode\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], LazyLoadImageDirective.prototype, \"onLoad\", void 0);\n\nLazyLoadImageDirective = __decorate([__param(2, Inject(PLATFORM_ID)), __param(3, Optional()), __param(3, Inject('options')), __metadata(\"design:paramtypes\", [ElementRef, NgZone, Object, Object])], LazyLoadImageDirective);\nvar LazyLoadImageModule_1;\n\nvar LazyLoadImageModule = LazyLoadImageModule_1 = /*#__PURE__*/function () {\n  function LazyLoadImageModule() {\n    _classCallCheck(this, LazyLoadImageModule);\n  }\n\n  return _createClass(LazyLoadImageModule, null, [{\n    key: \"forRoot\",\n    value: function forRoot(options) {\n      return {\n        ngModule: LazyLoadImageModule_1,\n        providers: [{\n          provide: 'options',\n          useValue: options\n        }]\n      };\n    }\n  }]);\n}();\n\nLazyLoadImageModule.Éµfac = function LazyLoadImageModule_Factory(t) {\n  return new (t || LazyLoadImageModule)();\n};\n\nLazyLoadImageModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({\n  type: LazyLoadImageModule\n});\nLazyLoadImageModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(LazyLoadImageDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[lazyLoad]'\n    }]\n  }], function () {\n    return [{\n      type: Éµngcc0.ElementRef\n    }, {\n      type: Éµngcc0.NgZone\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: ['options']\n      }]\n    }];\n  }, {\n    onLoad: [{\n      type: Output\n    }],\n    lazyImage: [{\n      type: Input,\n      args: ['lazyLoad']\n    }],\n    defaultImage: [{\n      type: Input\n    }],\n    errorImage: [{\n      type: Input\n    }],\n    scrollTarget: [{\n      type: Input\n    }],\n    customObservable: [{\n      type: Input\n    }],\n    offset: [{\n      type: Input\n    }],\n    useSrcset: [{\n      type: Input\n    }],\n    decode: [{\n      type: Input\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(LazyLoadImageModule, {\n    declarations: [LazyLoadImageDirective],\n    exports: [LazyLoadImageDirective]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(LazyLoadImageModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [LazyLoadImageDirective],\n      exports: [LazyLoadImageDirective]\n    }]\n  }], null, null);\n})();\n\nvar Rect = /*#__PURE__*/function () {\n  function Rect(left, top, right, bottom) {\n    _classCallCheck(this, Rect);\n\n    this.left = left;\n    this.top = top;\n    this.right = right;\n    this.bottom = bottom;\n  }\n\n  return _createClass(Rect, [{\n    key: \"inflate\",\n    value: function inflate(inflateBy) {\n      this.left -= inflateBy;\n      this.top -= inflateBy;\n      this.right += inflateBy;\n      this.bottom += inflateBy;\n    }\n  }, {\n    key: \"intersectsWith\",\n    value: function intersectsWith(rect) {\n      return rect.left < this.right && this.left < rect.right && rect.top < this.bottom && this.top < rect.bottom;\n    }\n  }, {\n    key: \"getIntersectionWith\",\n    value: function getIntersectionWith(rect) {\n      var left = Math.max(this.left, rect.left);\n      var top = Math.max(this.top, rect.top);\n      var right = Math.min(this.right, rect.right);\n      var bottom = Math.min(this.bottom, rect.bottom);\n\n      if (right >= left && bottom >= top) {\n        return new Rect(left, top, right, bottom);\n      } else {\n        return Rect.empty;\n      }\n    }\n  }], [{\n    key: \"fromElement\",\n    value: function fromElement(element) {\n      var _element$getBoundingC = element.getBoundingClientRect(),\n          left = _element$getBoundingC.left,\n          top = _element$getBoundingC.top,\n          right = _element$getBoundingC.right,\n          bottom = _element$getBoundingC.bottom;\n\n      if (left === 0 && top === 0 && right === 0 && bottom === 0) {\n        return Rect.empty;\n      } else {\n        return new Rect(left, top, right, bottom);\n      }\n    }\n  }, {\n    key: \"fromWindow\",\n    value: function fromWindow(_window) {\n      return new Rect(0, 0, _window.innerWidth, _window.innerHeight);\n    }\n  }]);\n}();\n\nRect.empty = new Rect(0, 0, 0, 0);\nvar scrollListeners = new WeakMap();\n\nfunction sampleObservable(obs, scheduler) {\n  return obs.pipe(sampleTime(100, scheduler), share(), startWith(''));\n} // Only create one scroll listener per target and share the observable.\n// Typical, there will only be one observable per application\n\n\nvar getScrollListener = function getScrollListener(scrollTarget) {\n  if (!scrollTarget || typeof scrollTarget.addEventListener !== 'function') {\n    console.warn('`addEventListener` on ' + scrollTarget + ' (scrollTarget) is not a function. Skipping this target');\n    return empty();\n  }\n\n  var scrollListener = scrollListeners.get(scrollTarget);\n\n  if (scrollListener) {\n    return scrollListener;\n  }\n\n  var srollEvent = Observable.create(function (observer) {\n    var eventName = 'scroll';\n\n    var handler = function handler(event) {\n      return observer.next(event);\n    };\n\n    var options = {\n      passive: true,\n      capture: false\n    };\n    scrollTarget.addEventListener(eventName, handler, options);\n    return function () {\n      return scrollTarget.removeEventListener(eventName, handler, options);\n    };\n  });\n  var listener = sampleObservable(srollEvent);\n  scrollListeners.set(scrollTarget, listener);\n  return listener;\n};\n\nvar isVisible$2 = function isVisible$2(_ref8) {\n  var element = _ref8.element,\n      offset = _ref8.offset,\n      scrollContainer = _ref8.scrollContainer;\n  var getWindow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {\n    return window;\n  };\n  var elementBounds = Rect.fromElement(element);\n\n  if (elementBounds === Rect.empty) {\n    return false;\n  }\n\n  var windowBounds = Rect.fromWindow(getWindow());\n  elementBounds.inflate(offset);\n\n  if (scrollContainer) {\n    var scrollContainerBounds = Rect.fromElement(scrollContainer);\n    var intersection = scrollContainerBounds.getIntersectionWith(windowBounds);\n    return elementBounds.intersectsWith(intersection);\n  } else {\n    return elementBounds.intersectsWith(windowBounds);\n  }\n};\n\nvar getObservable$2 = function getObservable$2(attributes) {\n  if (attributes.customObservable) {\n    return attributes.customObservable.pipe(startWith(''));\n  }\n\n  if (attributes.scrollContainer) {\n    return getScrollListener(attributes.scrollContainer);\n  }\n\n  return getScrollListener(window);\n};\n\nvar scrollPreset = Object.assign({}, sharedPreset, {\n  isVisible: isVisible$2,\n  getObservable: getObservable$2\n});\nexport { LazyLoadImageDirective, LazyLoadImageModule, intersectionObserverPreset, scrollPreset }; //# sourceMappingURL=ng-lazyload-image.js.map","map":null,"metadata":{},"sourceType":"module"}