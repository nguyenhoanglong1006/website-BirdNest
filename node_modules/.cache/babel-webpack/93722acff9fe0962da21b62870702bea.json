{"ast":null,"code":"\"use strict\";\n\nmodule.exports = DOMImplementation;\n\nvar Document = require('./Document');\n\nvar DocumentType = require('./DocumentType');\n\nvar HTMLParser = require('./HTMLParser');\n\nvar utils = require('./utils');\n\nvar xml = require('./xmlnames'); // Each document must have its own instance of the domimplementation object\n\n\nfunction DOMImplementation(contextObject) {\n  this.contextObject = contextObject;\n} // Feature/version pairs that DOMImplementation.hasFeature() returns\n// true for.  It returns false for anything else.\n\n\nvar supportedFeatures = {\n  'xml': {\n    '': true,\n    '1.0': true,\n    '2.0': true\n  },\n  // DOM Core\n  'core': {\n    '': true,\n    '2.0': true\n  },\n  // DOM Core\n  'html': {\n    '': true,\n    '1.0': true,\n    '2.0': true\n  },\n  // HTML\n  'xhtml': {\n    '': true,\n    '1.0': true,\n    '2.0': true\n  } // HTML\n\n};\nDOMImplementation.prototype = {\n  hasFeature: function hasFeature(feature, version) {\n    var f = supportedFeatures[(feature || '').toLowerCase()];\n    return f && f[version || ''] || false;\n  },\n  createDocumentType: function createDocumentType(qualifiedName, publicId, systemId) {\n    if (!xml.isValidQName(qualifiedName)) utils.InvalidCharacterError();\n    return new DocumentType(this.contextObject, qualifiedName, publicId, systemId);\n  },\n  createDocument: function createDocument(namespace, qualifiedName, doctype) {\n    //\n    // Note that the current DOMCore spec makes it impossible to\n    // create an HTML document with this function, even if the\n    // namespace and doctype are propertly set.  See this thread:\n    // http://lists.w3.org/Archives/Public/www-dom/2011AprJun/0132.html\n    //\n    var d = new Document(false, null);\n    var e;\n    if (qualifiedName) e = d.createElementNS(namespace, qualifiedName);else e = null;\n\n    if (doctype) {\n      d.appendChild(doctype);\n    }\n\n    if (e) d.appendChild(e);\n\n    if (namespace === utils.NAMESPACE.HTML) {\n      d._contentType = 'application/xhtml+xml';\n    } else if (namespace === utils.NAMESPACE.SVG) {\n      d._contentType = 'image/svg+xml';\n    } else {\n      d._contentType = 'application/xml';\n    }\n\n    return d;\n  },\n  createHTMLDocument: function createHTMLDocument(titleText) {\n    var d = new Document(true, null);\n    d.appendChild(new DocumentType(d, 'html'));\n    var html = d.createElement('html');\n    d.appendChild(html);\n    var head = d.createElement('head');\n    html.appendChild(head);\n\n    if (titleText !== undefined) {\n      var title = d.createElement('title');\n      head.appendChild(title);\n      title.appendChild(d.createTextNode(titleText));\n    }\n\n    html.appendChild(d.createElement('body'));\n    d.modclock = 1; // Start tracking modifications\n\n    return d;\n  },\n  mozSetOutputMutationHandler: function mozSetOutputMutationHandler(doc, handler) {\n    doc.mutationHandler = handler;\n  },\n  mozGetInputMutationHandler: function mozGetInputMutationHandler(doc) {\n    utils.nyi();\n  },\n  mozHTMLParser: HTMLParser\n};","map":null,"metadata":{},"sourceType":"script"}