{"ast":null,"code":"\"use strict\";\n\nvar utils = require('./utils');\n\nvar LinkedList = module.exports = {\n  // basic validity tests on a circular linked list a\n  valid: function valid(a) {\n    utils.assert(a, \"list falsy\");\n    utils.assert(a._previousSibling, \"previous falsy\");\n    utils.assert(a._nextSibling, \"next falsy\"); // xxx check that list is actually circular\n\n    return true;\n  },\n  // insert a before b\n  insertBefore: function insertBefore(a, b) {\n    utils.assert(LinkedList.valid(a) && LinkedList.valid(b));\n    var a_first = a,\n        a_last = a._previousSibling;\n    var b_first = b,\n        b_last = b._previousSibling;\n    a_first._previousSibling = b_last;\n    a_last._nextSibling = b_first;\n    b_last._nextSibling = a_first;\n    b_first._previousSibling = a_last;\n    utils.assert(LinkedList.valid(a) && LinkedList.valid(b));\n  },\n  // replace a single node a with a list b (which could be null)\n  replace: function replace(a, b) {\n    utils.assert(LinkedList.valid(a) && (b === null || LinkedList.valid(b)));\n\n    if (b !== null) {\n      LinkedList.insertBefore(b, a);\n    }\n\n    LinkedList.remove(a);\n    utils.assert(LinkedList.valid(a) && (b === null || LinkedList.valid(b)));\n  },\n  // remove single node a from its list\n  remove: function remove(a) {\n    utils.assert(LinkedList.valid(a));\n    var prev = a._previousSibling;\n\n    if (prev === a) {\n      return;\n    }\n\n    var next = a._nextSibling;\n    prev._nextSibling = next;\n    next._previousSibling = prev;\n    a._previousSibling = a._nextSibling = a;\n    utils.assert(LinkedList.valid(a));\n  }\n};","map":null,"metadata":{},"sourceType":"script"}