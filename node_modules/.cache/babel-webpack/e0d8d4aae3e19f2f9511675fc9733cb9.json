{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _isNativeReflectConstruct = require(\"/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/@babel/runtime/helpers/isNativeReflectConstruct\");\n\nvar _getPrototypeOf = require(\"/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/@babel/runtime/helpers/inherits\");\n\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n\nvar Mixin = require('../../utils/mixin');\n\nvar PositionTrackingPreprocessorMixin = /*#__PURE__*/function (_Mixin) {\n  function PositionTrackingPreprocessorMixin(preprocessor) {\n    var _this;\n\n    _classCallCheck(this, PositionTrackingPreprocessorMixin);\n\n    _this = _callSuper(this, PositionTrackingPreprocessorMixin, [preprocessor]);\n    _this.preprocessor = preprocessor;\n    _this.isEol = false;\n    _this.lineStartPos = 0;\n    _this.droppedBufferSize = 0;\n    _this.offset = 0;\n    _this.col = 0;\n    _this.line = 1;\n    return _this;\n  }\n\n  _inherits(PositionTrackingPreprocessorMixin, _Mixin);\n\n  return _createClass(PositionTrackingPreprocessorMixin, [{\n    key: \"_getOverriddenMethods\",\n    value: function _getOverriddenMethods(mxn, orig) {\n      return {\n        advance: function advance() {\n          var pos = this.pos + 1;\n          var ch = this.html[pos]; //NOTE: LF should be in the last column of the line\n\n          if (mxn.isEol) {\n            mxn.isEol = false;\n            mxn.line++;\n            mxn.lineStartPos = pos;\n          }\n\n          if (ch === '\\n' || ch === '\\r' && this.html[pos + 1] !== '\\n') {\n            mxn.isEol = true;\n          }\n\n          mxn.col = pos - mxn.lineStartPos + 1;\n          mxn.offset = mxn.droppedBufferSize + pos;\n          return orig.advance.call(this);\n        },\n        retreat: function retreat() {\n          orig.retreat.call(this);\n          mxn.isEol = false;\n          mxn.col = this.pos - mxn.lineStartPos + 1;\n        },\n        dropParsedChunk: function dropParsedChunk() {\n          var prevPos = this.pos;\n          orig.dropParsedChunk.call(this);\n          var reduction = prevPos - this.pos;\n          mxn.lineStartPos -= reduction;\n          mxn.droppedBufferSize += reduction;\n          mxn.offset = mxn.droppedBufferSize + this.pos;\n        }\n      };\n    }\n  }]);\n}(Mixin);\n\nmodule.exports = PositionTrackingPreprocessorMixin;","map":null,"metadata":{},"sourceType":"script"}