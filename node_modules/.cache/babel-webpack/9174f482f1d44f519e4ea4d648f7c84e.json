{"ast":null,"code":"\"use strict\";\n\nvar DOMImplementation = require('./DOMImplementation');\n\nvar HTMLParser = require('./HTMLParser');\n\nvar Window = require('./Window');\n\nexports.createDOMImplementation = function () {\n  return new DOMImplementation(null);\n};\n\nexports.createDocument = function (html, force) {\n  // Previous API couldn't let you pass '' as a document, and that\n  // yields a slightly different document than createHTMLDocument('')\n  // does.  The new `force` parameter lets you pass '' if you want to.\n  if (html || force) {\n    var parser = new HTMLParser();\n    parser.parse(html || '', true);\n    return parser.document();\n  }\n\n  return new DOMImplementation(null).createHTMLDocument(\"\");\n};\n\nexports.createIncrementalHTMLParser = function () {\n  var parser = new HTMLParser();\n  /** API for incremental parser. */\n\n  return {\n    /** Provide an additional chunk of text to be parsed. */\n    write: function write(s) {\n      if (s.length > 0) {\n        parser.parse(s, false, function () {\n          return true;\n        });\n      }\n    },\n\n    /**\n     * Signal that we are done providing input text, optionally\n     * providing one last chunk as a parameter.\n     */\n    end: function end(s) {\n      parser.parse(s || '', true, function () {\n        return true;\n      });\n    },\n\n    /**\n     * Performs a chunk of parsing work, returning at the end of\n     * the next token as soon as shouldPauseFunc() returns true.\n     * Returns true iff there is more work to do.\n     *\n     * For example:\n     * ```\n     *  var incrParser = domino.createIncrementalHTMLParser();\n     *  incrParser.end('...long html document...');\n     *  while (true) {\n     *    // Pause every 10ms\n     *    var start = Date.now();\n     *    var pauseIn10 = function() { return (Date.now() - start) >= 10; };\n     *    if (!incrParser.process(pauseIn10)) {\n     *      break;\n     *    }\n     *    ...yield to other tasks, do other housekeeping, etc...\n     *  }\n     * ```\n     */\n    process: function process(shouldPauseFunc) {\n      return parser.parse('', false, shouldPauseFunc);\n    },\n\n    /**\n     * Returns the result of the incremental parse.  Valid after\n     * `this.end()` has been called and `this.process()` has returned\n     * false.\n     */\n    document: function document() {\n      return parser.document();\n    }\n  };\n};\n\nexports.createWindow = function (html, address) {\n  var document = exports.createDocument(html);\n\n  if (address !== undefined) {\n    document._address = address;\n  }\n\n  return new Window(document);\n};\n\nexports.impl = require('./impl');","map":null,"metadata":{},"sourceType":"script"}