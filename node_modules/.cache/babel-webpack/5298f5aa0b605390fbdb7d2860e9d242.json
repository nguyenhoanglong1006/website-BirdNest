{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subject_1 = require('../Subject');\n\nvar tryCatch_1 = require('../util/tryCatch');\n\nvar errorObject_1 = require('../util/errorObject');\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\n\n\nfunction repeatWhen(notifier) {\n  return function (source) {\n    return source.lift(new RepeatWhenOperator(notifier));\n  };\n}\n\nexports.repeatWhen = repeatWhen;\n\nvar RepeatWhenOperator = function () {\n  function RepeatWhenOperator(notifier) {\n    this.notifier = notifier;\n  }\n\n  RepeatWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  };\n\n  return RepeatWhenOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar RepeatWhenSubscriber = function (_super) {\n  __extends(RepeatWhenSubscriber, _super);\n\n  function RepeatWhenSubscriber(destination, notifier, source) {\n    _super.call(this, destination);\n\n    this.notifier = notifier;\n    this.source = source;\n    this.sourceIsBeingSubscribedTo = true;\n  }\n\n  RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  };\n\n  RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return _super.prototype.complete.call(this);\n    }\n  };\n\n  RepeatWhenSubscriber.prototype.complete = function () {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return _super.prototype.complete.call(this);\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.notifications.next();\n    }\n  };\n  /** @deprecated internal use only */\n\n\n  RepeatWhenSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n        notifications = _a.notifications,\n        retriesSubscription = _a.retriesSubscription;\n\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n\n    this.retries = null;\n  };\n  /** @deprecated internal use only */\n\n\n  RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n    var _a = this,\n        notifications = _a.notifications,\n        retries = _a.retries,\n        retriesSubscription = _a.retriesSubscription;\n\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    _super.prototype._unsubscribeAndRecycle.call(this);\n\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  };\n\n  RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n    this.notifications = new Subject_1.Subject();\n    var retries = tryCatch_1.tryCatch(this.notifier)(this.notifications);\n\n    if (retries === errorObject_1.errorObject) {\n      return _super.prototype.complete.call(this);\n    }\n\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n  };\n\n  return RepeatWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber); //# sourceMappingURL=repeatWhen.js.map","map":null,"metadata":{},"sourceType":"script"}