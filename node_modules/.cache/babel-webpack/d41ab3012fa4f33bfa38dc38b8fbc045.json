{"ast":null,"code":"\"use strict\";\n\nvar parserlib = require('./cssparser');\n\nmodule.exports = CSSStyleDeclaration;\n\nfunction CSSStyleDeclaration(elt) {\n  this._element = elt;\n} // Utility function for parsing style declarations\n// Pass in a string like \"margin-left: 5px; border-style: solid\"\n// and this function returns an object like\n// {\"margin-left\":\"5px\", \"border-style\":\"solid\"}\n\n\nfunction parseStyles(s) {\n  var parser = new parserlib.css.Parser();\n  var result = {\n    property: Object.create(null),\n    priority: Object.create(null)\n  };\n  parser.addListener(\"property\", function (e) {\n    if (e.invalid) return; // Skip errors\n\n    result.property[e.property.text] = e.value.text;\n    if (e.important) result.priority[e.property.text] = 'important';\n  });\n  s = ('' + s).replace(/^;/, '');\n  parser.parseStyleAttribute(s);\n  return result;\n}\n\nvar NO_CHANGE = {}; // Private marker object\n\nCSSStyleDeclaration.prototype = Object.create(Object.prototype, {\n  // Return the parsed form of the element's style attribute.\n  // If the element's style attribute has never been parsed\n  // or if it has changed since the last parse, then reparse it\n  // Note that the styles don't get parsed until they're actually needed\n  _parsed: {\n    get: function get() {\n      if (!this._parsedStyles || this.cssText !== this._lastParsedText) {\n        var text = this.cssText;\n        this._parsedStyles = parseStyles(text);\n        this._lastParsedText = text;\n        delete this._names;\n      }\n\n      return this._parsedStyles;\n    }\n  },\n  // Call this method any time the parsed representation of the\n  // style changes.  It converts the style properties to a string and\n  // sets cssText and the element's style attribute\n  _serialize: {\n    value: function value() {\n      var styles = this._parsed;\n      var s = \"\";\n\n      for (var name in styles.property) {\n        if (s) s += \" \";\n        s += name + \": \" + styles.property[name];\n\n        if (styles.priority[name]) {\n          s += \" !\" + styles.priority[name];\n        }\n\n        s += \";\";\n      }\n\n      this.cssText = s; // also sets the style attribute\n\n      this._lastParsedText = s; // so we don't reparse\n\n      delete this._names;\n    }\n  },\n  cssText: {\n    get: function get() {\n      // XXX: this is a CSSStyleDeclaration for an element.\n      // A different impl might be necessary for a set of styles\n      // associated returned by getComputedStyle(), e.g.\n      return this._element.getAttribute(\"style\");\n    },\n    set: function set(value) {\n      // XXX: I should parse and serialize the value to\n      // normalize it and remove errors. FF and chrome do that.\n      this._element.setAttribute(\"style\", value);\n    }\n  },\n  length: {\n    get: function get() {\n      if (!this._names) this._names = Object.getOwnPropertyNames(this._parsed.property);\n      return this._names.length;\n    }\n  },\n  item: {\n    value: function value(n) {\n      if (!this._names) this._names = Object.getOwnPropertyNames(this._parsed.property);\n      return this._names[n];\n    }\n  },\n  getPropertyValue: {\n    value: function value(property) {\n      property = property.toLowerCase();\n      return this._parsed.property[property] || \"\";\n    }\n  },\n  getPropertyPriority: {\n    value: function value(property) {\n      property = property.toLowerCase();\n      return this._parsed.priority[property] || \"\";\n    }\n  },\n  setProperty: {\n    value: function value(property, _value, priority) {\n      property = property.toLowerCase();\n\n      if (_value === null || _value === undefined) {\n        _value = \"\";\n      }\n\n      if (priority === null || priority === undefined) {\n        priority = \"\";\n      } // String coercion\n\n\n      if (_value !== NO_CHANGE) {\n        _value = \"\" + _value;\n      }\n\n      if (_value === \"\") {\n        this.removeProperty(property);\n        return;\n      }\n\n      if (priority !== \"\" && priority !== NO_CHANGE && !/^important$/i.test(priority)) {\n        return;\n      }\n\n      var styles = this._parsed;\n\n      if (_value === NO_CHANGE) {\n        if (!styles.property[property]) {\n          return; // Not a valid property name.\n        }\n\n        if (priority !== \"\") {\n          styles.priority[property] = \"important\";\n        } else {\n          delete styles.priority[property];\n        }\n      } else {\n        // We don't just accept the property value.  Instead\n        // we parse it to ensure that it is something valid.\n        // If it contains a semicolon it is invalid\n        if (_value.indexOf(\";\") !== -1) return;\n        var newprops = parseStyles(property + \":\" + _value);\n\n        if (Object.getOwnPropertyNames(newprops.property).length === 0) {\n          return; // no valid property found\n        }\n\n        if (Object.getOwnPropertyNames(newprops.priority).length !== 0) {\n          return; // if the value included '!important' it wasn't valid.\n        } // XXX handle shorthand properties\n\n\n        for (var p in newprops.property) {\n          styles.property[p] = newprops.property[p];\n\n          if (priority === NO_CHANGE) {\n            continue;\n          } else if (priority !== \"\") {\n            styles.priority[p] = \"important\";\n          } else if (styles.priority[p]) {\n            delete styles.priority[p];\n          }\n        }\n      } // Serialize and update cssText and element.style!\n\n\n      this._serialize();\n    }\n  },\n  setPropertyValue: {\n    value: function value(property, _value2) {\n      return this.setProperty(property, _value2, NO_CHANGE);\n    }\n  },\n  setPropertyPriority: {\n    value: function value(property, priority) {\n      return this.setProperty(property, NO_CHANGE, priority);\n    }\n  },\n  removeProperty: {\n    value: function value(property) {\n      property = property.toLowerCase();\n      var styles = this._parsed;\n\n      if (property in styles.property) {\n        delete styles.property[property];\n        delete styles.priority[property]; // Serialize and update cssText and element.style!\n\n        this._serialize();\n      }\n    }\n  }\n});\nvar cssProperties = {\n  alignContent: \"align-content\",\n  alignItems: \"align-items\",\n  alignmentBaseline: \"alignment-baseline\",\n  alignSelf: \"align-self\",\n  animation: \"animation\",\n  animationDelay: \"animation-delay\",\n  animationDirection: \"animation-direction\",\n  animationDuration: \"animation-duration\",\n  animationFillMode: \"animation-fill-mode\",\n  animationIterationCount: \"animation-iteration-count\",\n  animationName: \"animation-name\",\n  animationPlayState: \"animation-play-state\",\n  animationTimingFunction: \"animation-timing-function\",\n  backfaceVisibility: \"backface-visibility\",\n  background: \"background\",\n  backgroundAttachment: \"background-attachment\",\n  backgroundClip: \"background-clip\",\n  backgroundColor: \"background-color\",\n  backgroundImage: \"background-image\",\n  backgroundOrigin: \"background-origin\",\n  backgroundPosition: \"background-position\",\n  backgroundPositionX: \"background-position-x\",\n  backgroundPositionY: \"background-position-y\",\n  backgroundRepeat: \"background-repeat\",\n  backgroundSize: \"background-size\",\n  baselineShift: \"baseline-shift\",\n  border: \"border\",\n  borderBottom: \"border-bottom\",\n  borderBottomColor: \"border-bottom-color\",\n  borderBottomLeftRadius: \"border-bottom-left-radius\",\n  borderBottomRightRadius: \"border-bottom-right-radius\",\n  borderBottomStyle: \"border-bottom-style\",\n  borderBottomWidth: \"border-bottom-width\",\n  borderCollapse: \"border-collapse\",\n  borderColor: \"border-color\",\n  borderImage: \"border-image\",\n  borderImageOutset: \"border-image-outset\",\n  borderImageRepeat: \"border-image-repeat\",\n  borderImageSlice: \"border-image-slice\",\n  borderImageSource: \"border-image-source\",\n  borderImageWidth: \"border-image-width\",\n  borderLeft: \"border-left\",\n  borderLeftColor: \"border-left-color\",\n  borderLeftStyle: \"border-left-style\",\n  borderLeftWidth: \"border-left-width\",\n  borderRadius: \"border-radius\",\n  borderRight: \"border-right\",\n  borderRightColor: \"border-right-color\",\n  borderRightStyle: \"border-right-style\",\n  borderRightWidth: \"border-right-width\",\n  borderSpacing: \"border-spacing\",\n  borderStyle: \"border-style\",\n  borderTop: \"border-top\",\n  borderTopColor: \"border-top-color\",\n  borderTopLeftRadius: \"border-top-left-radius\",\n  borderTopRightRadius: \"border-top-right-radius\",\n  borderTopStyle: \"border-top-style\",\n  borderTopWidth: \"border-top-width\",\n  borderWidth: \"border-width\",\n  bottom: \"bottom\",\n  boxShadow: \"box-shadow\",\n  boxSizing: \"box-sizing\",\n  breakAfter: \"break-after\",\n  breakBefore: \"break-before\",\n  breakInside: \"break-inside\",\n  captionSide: \"caption-side\",\n  clear: \"clear\",\n  clip: \"clip\",\n  clipPath: \"clip-path\",\n  clipRule: \"clip-rule\",\n  color: \"color\",\n  colorInterpolationFilters: \"color-interpolation-filters\",\n  columnCount: \"column-count\",\n  columnFill: \"column-fill\",\n  columnGap: \"column-gap\",\n  columnRule: \"column-rule\",\n  columnRuleColor: \"column-rule-color\",\n  columnRuleStyle: \"column-rule-style\",\n  columnRuleWidth: \"column-rule-width\",\n  columns: \"columns\",\n  columnSpan: \"column-span\",\n  columnWidth: \"column-width\",\n  content: \"content\",\n  counterIncrement: \"counter-increment\",\n  counterReset: \"counter-reset\",\n  cssFloat: \"float\",\n  cursor: \"cursor\",\n  direction: \"direction\",\n  display: \"display\",\n  dominantBaseline: \"dominant-baseline\",\n  emptyCells: \"empty-cells\",\n  enableBackground: \"enable-background\",\n  fill: \"fill\",\n  fillOpacity: \"fill-opacity\",\n  fillRule: \"fill-rule\",\n  filter: \"filter\",\n  flex: \"flex\",\n  flexBasis: \"flex-basis\",\n  flexDirection: \"flex-direction\",\n  flexFlow: \"flex-flow\",\n  flexGrow: \"flex-grow\",\n  flexShrink: \"flex-shrink\",\n  flexWrap: \"flex-wrap\",\n  floodColor: \"flood-color\",\n  floodOpacity: \"flood-opacity\",\n  font: \"font\",\n  fontFamily: \"font-family\",\n  fontFeatureSettings: \"font-feature-settings\",\n  fontSize: \"font-size\",\n  fontSizeAdjust: \"font-size-adjust\",\n  fontStretch: \"font-stretch\",\n  fontStyle: \"font-style\",\n  fontVariant: \"font-variant\",\n  fontWeight: \"font-weight\",\n  glyphOrientationHorizontal: \"glyph-orientation-horizontal\",\n  glyphOrientationVertical: \"glyph-orientation-vertical\",\n  grid: \"grid\",\n  gridArea: \"grid-area\",\n  gridAutoColumns: \"grid-auto-columns\",\n  gridAutoFlow: \"grid-auto-flow\",\n  gridAutoRows: \"grid-auto-rows\",\n  gridColumn: \"grid-column\",\n  gridColumnEnd: \"grid-column-end\",\n  gridColumnGap: \"grid-column-gap\",\n  gridColumnStart: \"grid-column-start\",\n  gridGap: \"grid-gap\",\n  gridRow: \"grid-row\",\n  gridRowEnd: \"grid-row-end\",\n  gridRowGap: \"grid-row-gap\",\n  gridRowStart: \"grid-row-start\",\n  gridTemplate: \"grid-template\",\n  gridTemplateAreas: \"grid-template-areas\",\n  gridTemplateColumns: \"grid-template-columns\",\n  gridTemplateRows: \"grid-template-rows\",\n  height: \"height\",\n  imeMode: \"ime-mode\",\n  justifyContent: \"justify-content\",\n  kerning: \"kerning\",\n  layoutGrid: \"layout-grid\",\n  layoutGridChar: \"layout-grid-char\",\n  layoutGridLine: \"layout-grid-line\",\n  layoutGridMode: \"layout-grid-mode\",\n  layoutGridType: \"layout-grid-type\",\n  left: \"left\",\n  letterSpacing: \"letter-spacing\",\n  lightingColor: \"lighting-color\",\n  lineBreak: \"line-break\",\n  lineHeight: \"line-height\",\n  listStyle: \"list-style\",\n  listStyleImage: \"list-style-image\",\n  listStylePosition: \"list-style-position\",\n  listStyleType: \"list-style-type\",\n  margin: \"margin\",\n  marginBottom: \"margin-bottom\",\n  marginLeft: \"margin-left\",\n  marginRight: \"margin-right\",\n  marginTop: \"margin-top\",\n  marker: \"marker\",\n  markerEnd: \"marker-end\",\n  markerMid: \"marker-mid\",\n  markerStart: \"marker-start\",\n  mask: \"mask\",\n  maxHeight: \"max-height\",\n  maxWidth: \"max-width\",\n  minHeight: \"min-height\",\n  minWidth: \"min-width\",\n  msContentZoomChaining: \"-ms-content-zoom-chaining\",\n  msContentZooming: \"-ms-content-zooming\",\n  msContentZoomLimit: \"-ms-content-zoom-limit\",\n  msContentZoomLimitMax: \"-ms-content-zoom-limit-max\",\n  msContentZoomLimitMin: \"-ms-content-zoom-limit-min\",\n  msContentZoomSnap: \"-ms-content-zoom-snap\",\n  msContentZoomSnapPoints: \"-ms-content-zoom-snap-points\",\n  msContentZoomSnapType: \"-ms-content-zoom-snap-type\",\n  msFlowFrom: \"-ms-flow-from\",\n  msFlowInto: \"-ms-flow-into\",\n  msFontFeatureSettings: \"-ms-font-feature-settings\",\n  msGridColumn: \"-ms-grid-column\",\n  msGridColumnAlign: \"-ms-grid-column-align\",\n  msGridColumns: \"-ms-grid-columns\",\n  msGridColumnSpan: \"-ms-grid-column-span\",\n  msGridRow: \"-ms-grid-row\",\n  msGridRowAlign: \"-ms-grid-row-align\",\n  msGridRows: \"-ms-grid-rows\",\n  msGridRowSpan: \"-ms-grid-row-span\",\n  msHighContrastAdjust: \"-ms-high-contrast-adjust\",\n  msHyphenateLimitChars: \"-ms-hyphenate-limit-chars\",\n  msHyphenateLimitLines: \"-ms-hyphenate-limit-lines\",\n  msHyphenateLimitZone: \"-ms-hyphenate-limit-zone\",\n  msHyphens: \"-ms-hyphens\",\n  msImeAlign: \"-ms-ime-align\",\n  msOverflowStyle: \"-ms-overflow-style\",\n  msScrollChaining: \"-ms-scroll-chaining\",\n  msScrollLimit: \"-ms-scroll-limit\",\n  msScrollLimitXMax: \"-ms-scroll-limit-x-max\",\n  msScrollLimitXMin: \"-ms-scroll-limit-x-min\",\n  msScrollLimitYMax: \"-ms-scroll-limit-y-max\",\n  msScrollLimitYMin: \"-ms-scroll-limit-y-min\",\n  msScrollRails: \"-ms-scroll-rails\",\n  msScrollSnapPointsX: \"-ms-scroll-snap-points-x\",\n  msScrollSnapPointsY: \"-ms-scroll-snap-points-y\",\n  msScrollSnapType: \"-ms-scroll-snap-type\",\n  msScrollSnapX: \"-ms-scroll-snap-x\",\n  msScrollSnapY: \"-ms-scroll-snap-y\",\n  msScrollTranslation: \"-ms-scroll-translation\",\n  msTextCombineHorizontal: \"-ms-text-combine-horizontal\",\n  msTextSizeAdjust: \"-ms-text-size-adjust\",\n  msTouchAction: \"-ms-touch-action\",\n  msTouchSelect: \"-ms-touch-select\",\n  msUserSelect: \"-ms-user-select\",\n  msWrapFlow: \"-ms-wrap-flow\",\n  msWrapMargin: \"-ms-wrap-margin\",\n  msWrapThrough: \"-ms-wrap-through\",\n  opacity: \"opacity\",\n  order: \"order\",\n  orphans: \"orphans\",\n  outline: \"outline\",\n  outlineColor: \"outline-color\",\n  outlineOffset: \"outline-offset\",\n  outlineStyle: \"outline-style\",\n  outlineWidth: \"outline-width\",\n  overflow: \"overflow\",\n  overflowX: \"overflow-x\",\n  overflowY: \"overflow-y\",\n  padding: \"padding\",\n  paddingBottom: \"padding-bottom\",\n  paddingLeft: \"padding-left\",\n  paddingRight: \"padding-right\",\n  paddingTop: \"padding-top\",\n  page: \"page\",\n  pageBreakAfter: \"page-break-after\",\n  pageBreakBefore: \"page-break-before\",\n  pageBreakInside: \"page-break-inside\",\n  perspective: \"perspective\",\n  perspectiveOrigin: \"perspective-origin\",\n  pointerEvents: \"pointer-events\",\n  position: \"position\",\n  quotes: \"quotes\",\n  right: \"right\",\n  rotate: \"rotate\",\n  rubyAlign: \"ruby-align\",\n  rubyOverhang: \"ruby-overhang\",\n  rubyPosition: \"ruby-position\",\n  scale: \"scale\",\n  size: \"size\",\n  stopColor: \"stop-color\",\n  stopOpacity: \"stop-opacity\",\n  stroke: \"stroke\",\n  strokeDasharray: \"stroke-dasharray\",\n  strokeDashoffset: \"stroke-dashoffset\",\n  strokeLinecap: \"stroke-linecap\",\n  strokeLinejoin: \"stroke-linejoin\",\n  strokeMiterlimit: \"stroke-miterlimit\",\n  strokeOpacity: \"stroke-opacity\",\n  strokeWidth: \"stroke-width\",\n  tableLayout: \"table-layout\",\n  textAlign: \"text-align\",\n  textAlignLast: \"text-align-last\",\n  textAnchor: \"text-anchor\",\n  textDecoration: \"text-decoration\",\n  textIndent: \"text-indent\",\n  textJustify: \"text-justify\",\n  textKashida: \"text-kashida\",\n  textKashidaSpace: \"text-kashida-space\",\n  textOverflow: \"text-overflow\",\n  textShadow: \"text-shadow\",\n  textTransform: \"text-transform\",\n  textUnderlinePosition: \"text-underline-position\",\n  top: \"top\",\n  touchAction: \"touch-action\",\n  transform: \"transform\",\n  transformOrigin: \"transform-origin\",\n  transformStyle: \"transform-style\",\n  transition: \"transition\",\n  transitionDelay: \"transition-delay\",\n  transitionDuration: \"transition-duration\",\n  transitionProperty: \"transition-property\",\n  transitionTimingFunction: \"transition-timing-function\",\n  translate: \"translate\",\n  unicodeBidi: \"unicode-bidi\",\n  verticalAlign: \"vertical-align\",\n  visibility: \"visibility\",\n  webkitAlignContent: \"-webkit-align-content\",\n  webkitAlignItems: \"-webkit-align-items\",\n  webkitAlignSelf: \"-webkit-align-self\",\n  webkitAnimation: \"-webkit-animation\",\n  webkitAnimationDelay: \"-webkit-animation-delay\",\n  webkitAnimationDirection: \"-webkit-animation-direction\",\n  webkitAnimationDuration: \"-webkit-animation-duration\",\n  webkitAnimationFillMode: \"-webkit-animation-fill-mode\",\n  webkitAnimationIterationCount: \"-webkit-animation-iteration-count\",\n  webkitAnimationName: \"-webkit-animation-name\",\n  webkitAnimationPlayState: \"-webkit-animation-play-state\",\n  webkitAnimationTimingFunction: \"-webkit-animation-timing-funciton\",\n  webkitAppearance: \"-webkit-appearance\",\n  webkitBackfaceVisibility: \"-webkit-backface-visibility\",\n  webkitBackgroundClip: \"-webkit-background-clip\",\n  webkitBackgroundOrigin: \"-webkit-background-origin\",\n  webkitBackgroundSize: \"-webkit-background-size\",\n  webkitBorderBottomLeftRadius: \"-webkit-border-bottom-left-radius\",\n  webkitBorderBottomRightRadius: \"-webkit-border-bottom-right-radius\",\n  webkitBorderImage: \"-webkit-border-image\",\n  webkitBorderRadius: \"-webkit-border-radius\",\n  webkitBorderTopLeftRadius: \"-webkit-border-top-left-radius\",\n  webkitBorderTopRightRadius: \"-webkit-border-top-right-radius\",\n  webkitBoxAlign: \"-webkit-box-align\",\n  webkitBoxDirection: \"-webkit-box-direction\",\n  webkitBoxFlex: \"-webkit-box-flex\",\n  webkitBoxOrdinalGroup: \"-webkit-box-ordinal-group\",\n  webkitBoxOrient: \"-webkit-box-orient\",\n  webkitBoxPack: \"-webkit-box-pack\",\n  webkitBoxSizing: \"-webkit-box-sizing\",\n  webkitColumnBreakAfter: \"-webkit-column-break-after\",\n  webkitColumnBreakBefore: \"-webkit-column-break-before\",\n  webkitColumnBreakInside: \"-webkit-column-break-inside\",\n  webkitColumnCount: \"-webkit-column-count\",\n  webkitColumnGap: \"-webkit-column-gap\",\n  webkitColumnRule: \"-webkit-column-rule\",\n  webkitColumnRuleColor: \"-webkit-column-rule-color\",\n  webkitColumnRuleStyle: \"-webkit-column-rule-style\",\n  webkitColumnRuleWidth: \"-webkit-column-rule-width\",\n  webkitColumns: \"-webkit-columns\",\n  webkitColumnSpan: \"-webkit-column-span\",\n  webkitColumnWidth: \"-webkit-column-width\",\n  webkitFilter: \"-webkit-filter\",\n  webkitFlex: \"-webkit-flex\",\n  webkitFlexBasis: \"-webkit-flex-basis\",\n  webkitFlexDirection: \"-webkit-flex-direction\",\n  webkitFlexFlow: \"-webkit-flex-flow\",\n  webkitFlexGrow: \"-webkit-flex-grow\",\n  webkitFlexShrink: \"-webkit-flex-shrink\",\n  webkitFlexWrap: \"-webkit-flex-wrap\",\n  webkitJustifyContent: \"-webkit-justify-content\",\n  webkitOrder: \"-webkit-order\",\n  webkitPerspective: \"-webkit-perspective-origin\",\n  webkitPerspectiveOrigin: \"-webkit-perspective-origin\",\n  webkitTapHighlightColor: \"-webkit-tap-highlight-color\",\n  webkitTextFillColor: \"-webkit-text-fill-color\",\n  webkitTextSizeAdjust: \"-webkit-text-size-adjust\",\n  webkitTextStroke: \"-webkit-text-stroke\",\n  webkitTextStrokeColor: \"-webkit-text-stroke-color\",\n  webkitTextStrokeWidth: \"-webkit-text-stroke-width\",\n  webkitTransform: \"-webkit-transform\",\n  webkitTransformOrigin: \"-webkit-transform-origin\",\n  webkitTransformStyle: \"-webkit-transform-style\",\n  webkitTransition: \"-webkit-transition\",\n  webkitTransitionDelay: \"-webkit-transition-delay\",\n  webkitTransitionDuration: \"-webkit-transition-duration\",\n  webkitTransitionProperty: \"-webkit-transition-property\",\n  webkitTransitionTimingFunction: \"-webkit-transition-timing-function\",\n  webkitUserModify: \"-webkit-user-modify\",\n  webkitUserSelect: \"-webkit-user-select\",\n  webkitWritingMode: \"-webkit-writing-mode\",\n  whiteSpace: \"white-space\",\n  widows: \"widows\",\n  width: \"width\",\n  wordBreak: \"word-break\",\n  wordSpacing: \"word-spacing\",\n  wordWrap: \"word-wrap\",\n  writingMode: \"writing-mode\",\n  zIndex: \"z-index\",\n  zoom: \"zoom\",\n  resize: \"resize\",\n  userSelect: \"user-select\"\n};\n\nfor (var prop in cssProperties) defineStyleProperty(prop);\n\nfunction defineStyleProperty(jsname) {\n  var cssname = cssProperties[jsname];\n  Object.defineProperty(CSSStyleDeclaration.prototype, jsname, {\n    get: function get() {\n      return this.getPropertyValue(cssname);\n    },\n    set: function set(value) {\n      this.setProperty(cssname, value);\n    }\n  });\n\n  if (!CSSStyleDeclaration.prototype.hasOwnProperty(cssname)) {\n    Object.defineProperty(CSSStyleDeclaration.prototype, cssname, {\n      get: function get() {\n        return this.getPropertyValue(cssname);\n      },\n      set: function set(value) {\n        this.setProperty(cssname, value);\n      }\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"script"}