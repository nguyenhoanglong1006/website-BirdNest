{"ast":null,"code":"\"use strict\";\n\nmodule.exports = NodeIterator;\n\nvar NodeFilter = require('./NodeFilter');\n\nvar NodeTraversal = require('./NodeTraversal');\n\nvar utils = require('./utils');\n/* Private methods and helpers */\n\n/**\n * @based on WebKit's NodeIterator::moveToNext and NodeIterator::moveToPrevious\n * https://trac.webkit.org/browser/trunk/Source/WebCore/dom/NodeIterator.cpp?rev=186279#L51\n */\n\n\nfunction move(node, stayWithin, directionIsNext) {\n  if (directionIsNext) {\n    return NodeTraversal.next(node, stayWithin);\n  } else {\n    if (node === stayWithin) {\n      return null;\n    }\n\n    return NodeTraversal.previous(node, null);\n  }\n}\n\nfunction isInclusiveAncestor(node, possibleChild) {\n  for (; possibleChild; possibleChild = possibleChild.parentNode) {\n    if (node === possibleChild) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * @spec http://www.w3.org/TR/dom/#concept-nodeiterator-traverse\n * @method\n * @access private\n * @param {NodeIterator} ni\n * @param {string} direction One of 'next' or 'previous'.\n * @return {Node|null}\n */\n\n\nfunction traverse(ni, directionIsNext) {\n  var node, beforeNode;\n  node = ni._referenceNode;\n  beforeNode = ni._pointerBeforeReferenceNode;\n\n  while (true) {\n    if (beforeNode === directionIsNext) {\n      beforeNode = !beforeNode;\n    } else {\n      node = move(node, ni._root, directionIsNext);\n\n      if (node === null) {\n        return null;\n      }\n    }\n\n    var result = ni._internalFilter(node);\n\n    if (result === NodeFilter.FILTER_ACCEPT) {\n      break;\n    }\n  }\n\n  ni._referenceNode = node;\n  ni._pointerBeforeReferenceNode = beforeNode;\n  return node;\n}\n/* Public API */\n\n/**\n * Implemented version: http://www.w3.org/TR/2015/WD-dom-20150618/#nodeiterator\n * Latest version: http://www.w3.org/TR/dom/#nodeiterator\n *\n * @constructor\n * @param {Node} root\n * @param {number} whatToShow [optional]\n * @param {Function|NodeFilter} filter [optional]\n * @throws Error\n */\n\n\nfunction NodeIterator(root, whatToShow, filter) {\n  if (!root || !root.nodeType) {\n    utils.NotSupportedError();\n  } // Read-only properties\n\n\n  this._root = root;\n  this._referenceNode = root;\n  this._pointerBeforeReferenceNode = true;\n  this._whatToShow = Number(whatToShow) || 0;\n  this._filter = filter || null;\n  this._active = false; // Record active node iterators in the document, in order to perform\n  // \"node iterator pre-removal steps\".\n\n  root.doc._attachNodeIterator(this);\n}\n\nObject.defineProperties(NodeIterator.prototype, {\n  root: {\n    get: function root() {\n      return this._root;\n    }\n  },\n  referenceNode: {\n    get: function referenceNode() {\n      return this._referenceNode;\n    }\n  },\n  pointerBeforeReferenceNode: {\n    get: function pointerBeforeReferenceNode() {\n      return this._pointerBeforeReferenceNode;\n    }\n  },\n  whatToShow: {\n    get: function whatToShow() {\n      return this._whatToShow;\n    }\n  },\n  filter: {\n    get: function filter() {\n      return this._filter;\n    }\n  },\n\n  /**\n   * @method\n   * @param {Node} node\n   * @return {Number} Constant NodeFilter.FILTER_ACCEPT,\n   *  NodeFilter.FILTER_REJECT or NodeFilter.FILTER_SKIP.\n   */\n  _internalFilter: {\n    value: function _internalFilter(node) {\n      /* jshint bitwise: false */\n      var result, filter;\n\n      if (this._active) {\n        utils.InvalidStateError();\n      } // Maps nodeType to whatToShow\n\n\n      if (!(1 << node.nodeType - 1 & this._whatToShow)) {\n        return NodeFilter.FILTER_SKIP;\n      }\n\n      filter = this._filter;\n\n      if (filter === null) {\n        result = NodeFilter.FILTER_ACCEPT;\n      } else {\n        this._active = true;\n\n        try {\n          if (typeof filter === 'function') {\n            result = filter(node);\n          } else {\n            result = filter.acceptNode(node);\n          }\n        } finally {\n          this._active = false;\n        }\n      } // Note that coercing to a number means that\n      //  `true` becomes `1` (which is NodeFilter.FILTER_ACCEPT)\n      //  `false` becomes `0` (neither accept, reject, or skip)\n\n\n      return +result;\n    }\n  },\n\n  /**\n   * @spec https://dom.spec.whatwg.org/#nodeiterator-pre-removing-steps\n   * @method\n   * @return void\n   */\n  _preremove: {\n    value: function _preremove(toBeRemovedNode) {\n      if (isInclusiveAncestor(toBeRemovedNode, this._root)) {\n        return;\n      }\n\n      if (!isInclusiveAncestor(toBeRemovedNode, this._referenceNode)) {\n        return;\n      }\n\n      if (this._pointerBeforeReferenceNode) {\n        var next = toBeRemovedNode;\n\n        while (next.lastChild) {\n          next = next.lastChild;\n        }\n\n        next = NodeTraversal.next(next, this.root);\n\n        if (next) {\n          this._referenceNode = next;\n          return;\n        }\n\n        this._pointerBeforeReferenceNode = false; // fall through\n      }\n\n      if (toBeRemovedNode.previousSibling === null) {\n        this._referenceNode = toBeRemovedNode.parentNode;\n      } else {\n        this._referenceNode = toBeRemovedNode.previousSibling;\n        var lastChild;\n\n        for (lastChild = this._referenceNode.lastChild; lastChild; lastChild = this._referenceNode.lastChild) {\n          this._referenceNode = lastChild;\n        }\n      }\n    }\n  },\n\n  /**\n   * @spec http://www.w3.org/TR/dom/#dom-nodeiterator-nextnode\n   * @method\n   * @return {Node|null}\n   */\n  nextNode: {\n    value: function nextNode() {\n      return traverse(this, true);\n    }\n  },\n\n  /**\n   * @spec http://www.w3.org/TR/dom/#dom-nodeiterator-previousnode\n   * @method\n   * @return {Node|null}\n   */\n  previousNode: {\n    value: function previousNode() {\n      return traverse(this, false);\n    }\n  },\n\n  /**\n   * @spec http://www.w3.org/TR/dom/#dom-nodeiterator-detach\n   * @method\n   * @return void\n   */\n  detach: {\n    value: function detach() {\n      /* \"The detach() method must do nothing.\n       * Its functionality (disabling a NodeIterator object) was removed,\n       * but the method itself is preserved for compatibility.\n       */\n    }\n  },\n\n  /** For compatibility with web-platform-tests. */\n  toString: {\n    value: function toString() {\n      return \"[object NodeIterator]\";\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"script"}