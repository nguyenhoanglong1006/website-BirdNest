{"ast":null,"code":"\"use strict\";\n\nvar URL = require('./URL');\n\nvar URLUtils = require('./URLUtils');\n\nmodule.exports = Location;\n\nfunction Location(window, href) {\n  this._window = window;\n  this._href = href;\n}\n\nLocation.prototype = Object.create(URLUtils.prototype, {\n  constructor: {\n    value: Location\n  },\n  // Special behavior when href is set\n  href: {\n    get: function get() {\n      return this._href;\n    },\n    set: function set(v) {\n      this.assign(v);\n    }\n  },\n  assign: {\n    value: function value(url) {\n      // Resolve the new url against the current one\n      // XXX:\n      // This is not actually correct. It should be resolved against\n      // the URL of the document of the script. For now, though, I only\n      // support a single window and there is only one base url.\n      // So this is good enough for now.\n      var current = new URL(this._href);\n      var newurl = current.resolve(url); // Save the new url\n\n      this._href = newurl; // Start loading the new document!\n      // XXX\n      // This is just something hacked together.\n      // The real algorithm is: http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html#navigate\n    }\n  },\n  replace: {\n    value: function value(url) {\n      // XXX\n      // Since we aren't tracking history yet, replace is the same as assign\n      this.assign(url);\n    }\n  },\n  reload: {\n    value: function value() {\n      // XXX:\n      // Actually, the spec is a lot more complicated than this\n      this.assign(this.href);\n    }\n  },\n  toString: {\n    value: function value() {\n      return this.href;\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"script"}