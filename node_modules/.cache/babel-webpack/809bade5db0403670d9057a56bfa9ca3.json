{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Text;\n\nvar utils = require('./utils');\n\nvar Node = require('./Node');\n\nvar CharacterData = require('./CharacterData');\n\nfunction Text(doc, data) {\n  CharacterData.call(this);\n  this.nodeType = Node.TEXT_NODE;\n  this.ownerDocument = doc;\n  this._data = data;\n  this._index = undefined;\n}\n\nvar nodeValue = {\n  get: function get() {\n    return this._data;\n  },\n  set: function set(v) {\n    if (v === null || v === undefined) {\n      v = '';\n    } else {\n      v = String(v);\n    }\n\n    if (v === this._data) return;\n    this._data = v;\n    if (this.rooted) this.ownerDocument.mutateValue(this);\n    if (this.parentNode && this.parentNode._textchangehook) this.parentNode._textchangehook(this);\n  }\n};\nText.prototype = Object.create(CharacterData.prototype, {\n  nodeName: {\n    value: \"#text\"\n  },\n  // These three attributes are all the same.\n  // The data attribute has a [TreatNullAs=EmptyString] but we'll\n  // implement that at the interface level\n  nodeValue: nodeValue,\n  textContent: nodeValue,\n  data: {\n    get: nodeValue.get,\n    set: function set(v) {\n      nodeValue.set.call(this, v === null ? '' : String(v));\n    }\n  },\n  splitText: {\n    value: function splitText(offset) {\n      if (offset > this._data.length || offset < 0) utils.IndexSizeError();\n\n      var newdata = this._data.substring(offset),\n          newnode = this.ownerDocument.createTextNode(newdata);\n\n      this.data = this.data.substring(0, offset);\n      var parent = this.parentNode;\n      if (parent !== null) parent.insertBefore(newnode, this.nextSibling);\n      return newnode;\n    }\n  },\n  wholeText: {\n    get: function wholeText() {\n      var result = this.textContent;\n\n      for (var next = this.nextSibling; next; next = next.nextSibling) {\n        if (next.nodeType !== Node.TEXT_NODE) {\n          break;\n        }\n\n        result += next.textContent;\n      }\n\n      return result;\n    }\n  },\n  // Obsolete, removed from spec.\n  replaceWholeText: {\n    value: utils.nyi\n  },\n  // Utility methods\n  clone: {\n    value: function clone() {\n      return new Text(this.ownerDocument, this._data);\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"script"}