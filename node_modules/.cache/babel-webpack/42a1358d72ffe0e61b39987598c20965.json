{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _isNativeReflectConstruct = require(\"/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/@babel/runtime/helpers/isNativeReflectConstruct\");\n\nvar _getPrototypeOf = require(\"/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/@babel/runtime/helpers/inherits\");\n\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n\nvar ErrorReportingMixinBase = require('./mixin-base');\n\nvar ErrorReportingTokenizerMixin = require('./tokenizer-mixin');\n\nvar LocationInfoTokenizerMixin = require('../location-info/tokenizer-mixin');\n\nvar Mixin = require('../../utils/mixin');\n\nvar ErrorReportingParserMixin = /*#__PURE__*/function (_ErrorReportingMixinB) {\n  function ErrorReportingParserMixin(parser, opts) {\n    var _this;\n\n    _classCallCheck(this, ErrorReportingParserMixin);\n\n    _this = _callSuper(this, ErrorReportingParserMixin, [parser, opts]);\n    _this.opts = opts;\n    _this.ctLoc = null;\n    _this.locBeforeToken = false;\n    return _this;\n  }\n\n  _inherits(ErrorReportingParserMixin, _ErrorReportingMixinB);\n\n  return _createClass(ErrorReportingParserMixin, [{\n    key: \"_setErrorLocation\",\n    value: function _setErrorLocation(err) {\n      if (this.ctLoc) {\n        err.startLine = this.ctLoc.startLine;\n        err.startCol = this.ctLoc.startCol;\n        err.startOffset = this.ctLoc.startOffset;\n        err.endLine = this.locBeforeToken ? this.ctLoc.startLine : this.ctLoc.endLine;\n        err.endCol = this.locBeforeToken ? this.ctLoc.startCol : this.ctLoc.endCol;\n        err.endOffset = this.locBeforeToken ? this.ctLoc.startOffset : this.ctLoc.endOffset;\n      }\n    }\n  }, {\n    key: \"_getOverriddenMethods\",\n    value: function _getOverriddenMethods(mxn, orig) {\n      return {\n        _bootstrap: function _bootstrap(document, fragmentContext) {\n          orig._bootstrap.call(this, document, fragmentContext);\n\n          Mixin.install(this.tokenizer, ErrorReportingTokenizerMixin, mxn.opts);\n          Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);\n        },\n        _processInputToken: function _processInputToken(token) {\n          mxn.ctLoc = token.location;\n\n          orig._processInputToken.call(this, token);\n        },\n        _err: function _err(code, options) {\n          mxn.locBeforeToken = options && options.beforeToken;\n\n          mxn._reportError(code);\n        }\n      };\n    }\n  }]);\n}(ErrorReportingMixinBase);\n\nmodule.exports = ErrorReportingParserMixin;","map":null,"metadata":{},"sourceType":"script"}