{"ast":null,"code":"\"use strict\";\n\nmodule.exports = {\n  // NOTE: The `serializeOne()` function used to live on the `Node.prototype`\n  // as a private method `Node#_serializeOne(child)`, however that requires\n  // a megamorphic property access `this._serializeOne` just to get to the\n  // method, and this is being done on lots of different `Node` subclasses,\n  // which puts a lot of pressure on V8's megamorphic stub cache. So by\n  // moving the helper off of the `Node.prototype` and into a separate\n  // function in this helper module, we get a monomorphic property access\n  // `NodeUtils.serializeOne` to get to the function and reduce pressure\n  // on the megamorphic stub cache.\n  // See https://github.com/fgnass/domino/pull/142 for more information.\n  serializeOne: serializeOne\n};\n\nvar utils = require('./utils');\n\nvar NAMESPACE = utils.NAMESPACE;\nvar hasRawContent = {\n  STYLE: true,\n  SCRIPT: true,\n  XMP: true,\n  IFRAME: true,\n  NOEMBED: true,\n  NOFRAMES: true,\n  PLAINTEXT: true\n};\nvar emptyElements = {\n  area: true,\n  base: true,\n  basefont: true,\n  bgsound: true,\n  br: true,\n  col: true,\n  embed: true,\n  frame: true,\n  hr: true,\n  img: true,\n  input: true,\n  keygen: true,\n  link: true,\n  meta: true,\n  param: true,\n  source: true,\n  track: true,\n  wbr: true\n};\nvar extraNewLine = {\n  /* Removed in https://github.com/whatwg/html/issues/944\n  pre: true,\n  textarea: true,\n  listing: true\n  */\n};\n\nfunction escape(s) {\n  return s.replace(/[&<>\\u00A0]/g, function (c) {\n    switch (c) {\n      case '&':\n        return '&amp;';\n\n      case '<':\n        return '&lt;';\n\n      case '>':\n        return '&gt;';\n\n      case \"\\xA0\":\n        return '&nbsp;';\n    }\n  });\n}\n\nfunction escapeAttr(s) {\n  var toEscape = /[&\"\\u00A0]/g;\n\n  if (!toEscape.test(s)) {\n    // nothing to do, fast path\n    return s;\n  } else {\n    return s.replace(toEscape, function (c) {\n      switch (c) {\n        case '&':\n          return '&amp;';\n\n        case '\"':\n          return '&quot;';\n\n        case \"\\xA0\":\n          return '&nbsp;';\n      }\n    });\n  }\n}\n\nfunction attrname(a) {\n  var ns = a.namespaceURI;\n  if (!ns) return a.localName;\n  if (ns === NAMESPACE.XML) return 'xml:' + a.localName;\n  if (ns === NAMESPACE.XLINK) return 'xlink:' + a.localName;\n\n  if (ns === NAMESPACE.XMLNS) {\n    if (a.localName === 'xmlns') return 'xmlns';else return 'xmlns:' + a.localName;\n  }\n\n  return a.name;\n}\n\nfunction serializeOne(kid, parent) {\n  var s = '';\n\n  switch (kid.nodeType) {\n    case 1:\n      //ELEMENT_NODE\n      var ns = kid.namespaceURI;\n      var html = ns === NAMESPACE.HTML;\n      var tagname = html || ns === NAMESPACE.SVG || ns === NAMESPACE.MATHML ? kid.localName : kid.tagName;\n      s += '<' + tagname;\n\n      for (var j = 0, k = kid._numattrs; j < k; j++) {\n        var a = kid._attr(j);\n\n        s += ' ' + attrname(a);\n        if (a.value !== undefined) s += '=\"' + escapeAttr(a.value) + '\"';\n      }\n\n      s += '>';\n\n      if (!(html && emptyElements[tagname])) {\n        var ss = kid.serialize();\n        if (html && extraNewLine[tagname] && ss.charAt(0) === '\\n') s += '\\n'; // Serialize children and add end tag for all others\n\n        s += ss;\n        s += '</' + tagname + '>';\n      }\n\n      break;\n\n    case 3: //TEXT_NODE\n\n    case 4:\n      //CDATA_SECTION_NODE\n      var parenttag;\n      if (parent.nodeType === 1\n      /*ELEMENT_NODE*/\n      && parent.namespaceURI === NAMESPACE.HTML) parenttag = parent.tagName;else parenttag = '';\n\n      if (hasRawContent[parenttag] || parenttag === 'NOSCRIPT' && parent.ownerDocument._scripting_enabled) {\n        s += kid.data;\n      } else {\n        s += escape(kid.data);\n      }\n\n      break;\n\n    case 8:\n      //COMMENT_NODE\n      s += '<!--' + kid.data + '-->';\n      break;\n\n    case 7:\n      //PROCESSING_INSTRUCTION_NODE\n      s += '<?' + kid.target + ' ' + kid.data + '?>';\n      break;\n\n    case 10:\n      //DOCUMENT_TYPE_NODE\n      s += '<!DOCTYPE ' + kid.name;\n\n      if (false) {\n        // Latest HTML serialization spec omits the public/system ID\n        if (kid.publicID) {\n          s += ' PUBLIC \"' + kid.publicId + '\"';\n        }\n\n        if (kid.systemId) {\n          s += ' \"' + kid.systemId + '\"';\n        }\n      }\n\n      s += '>';\n      break;\n\n    default:\n      utils.InvalidStateError();\n  }\n\n  return s;\n}","map":null,"metadata":{},"sourceType":"script"}