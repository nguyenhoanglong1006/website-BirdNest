{"ast":null,"code":"\"use strict\";\n\nvar attributes = require('./attributes');\n\nvar sloppy = require('./sloppy');\n\nvar isApiWritable = require(\"./config\").isApiWritable;\n\nmodule.exports = function (spec, defaultConstructor, tagList, tagNameToImpl) {\n  var c = spec.ctor;\n\n  if (c) {\n    var props = spec.props || {};\n\n    if (spec.attributes) {\n      for (var n in spec.attributes) {\n        var attr = spec.attributes[n];\n        if (typeof attr !== 'object' || Array.isArray(attr)) attr = {\n          type: attr\n        };\n        if (!attr.name) attr.name = n.toLowerCase();\n        props[n] = attributes.property(attr);\n      }\n    }\n\n    props.constructor = {\n      value: c,\n      writable: isApiWritable\n    };\n    c.prototype = Object.create((spec.superclass || defaultConstructor).prototype, props);\n\n    if (spec.events) {\n      addEventHandlers(c, spec.events);\n    }\n\n    tagList[c.name] = c;\n  } else {\n    c = defaultConstructor;\n  }\n\n  (spec.tags || spec.tag && [spec.tag] || []).forEach(function (tag) {\n    tagNameToImpl[tag] = c;\n  });\n  return c;\n};\n\nfunction EventHandlerBuilder(body, document, form, element) {\n  this.body = body;\n  this.document = document;\n  this.form = form;\n  this.element = element;\n}\n\nEventHandlerBuilder.prototype.build = sloppy.EventHandlerBuilder_build;\n\nfunction EventHandlerChangeHandler(elt, name, oldval, newval) {\n  var doc = elt.ownerDocument || Object.create(null);\n  var form = elt.form || Object.create(null);\n  elt[name] = new EventHandlerBuilder(newval, doc, form, elt).build();\n}\n\nfunction addEventHandlers(c, eventHandlerTypes) {\n  var p = c.prototype;\n  eventHandlerTypes.forEach(function (type) {\n    // Define the event handler registration IDL attribute for this type\n    Object.defineProperty(p, \"on\" + type, {\n      get: function get() {\n        return this._getEventHandler(type);\n      },\n      set: function set(v) {\n        this._setEventHandler(type, v);\n      }\n    }); // Define special behavior for the content attribute as well\n\n    attributes.registerChangeHandler(c, \"on\" + type, EventHandlerChangeHandler);\n  });\n}","map":null,"metadata":{},"sourceType":"script"}