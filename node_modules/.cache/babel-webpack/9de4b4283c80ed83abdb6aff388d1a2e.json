{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar isNumeric_1 = /*@__PURE__*/require('../util/isNumeric');\n\nvar Observable_1 = /*@__PURE__*/require('../Observable');\n\nvar async_1 = /*@__PURE__*/require('../scheduler/async');\n\nvar isScheduler_1 = /*@__PURE__*/require('../util/isScheduler');\n\nvar isDate_1 = /*@__PURE__*/require('../util/isDate');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\n\n\nvar TimerObservable = function (_super) {\n  __extends(TimerObservable, _super);\n\n  function TimerObservable(dueTime, period, scheduler) {\n    if (dueTime === void 0) {\n      dueTime = 0;\n    }\n\n    _super.call(this);\n\n    this.period = -1;\n    this.dueTime = 0;\n\n    if (isNumeric_1.isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler_1.isScheduler(period)) {\n      scheduler = period;\n    }\n\n    if (!isScheduler_1.isScheduler(scheduler)) {\n      scheduler = async_1.async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate_1.isDate(dueTime) ? +dueTime - this.scheduler.now() : dueTime;\n  }\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n\n\n  TimerObservable.create = function (initialDelay, period, scheduler) {\n    if (initialDelay === void 0) {\n      initialDelay = 0;\n    }\n\n    return new TimerObservable(initialDelay, period, scheduler);\n  };\n\n  TimerObservable.dispatch = function (state) {\n    var index = state.index,\n        period = state.period,\n        subscriber = state.subscriber;\n    var action = this;\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  };\n  /** @deprecated internal use only */\n\n\n  TimerObservable.prototype._subscribe = function (subscriber) {\n    var index = 0;\n\n    var _a = this,\n        period = _a.period,\n        dueTime = _a.dueTime,\n        scheduler = _a.scheduler;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index: index,\n      period: period,\n      subscriber: subscriber\n    });\n  };\n\n  return TimerObservable;\n}(Observable_1.Observable);\n\nexports.TimerObservable = TimerObservable;","map":null,"metadata":{},"sourceType":"script"}