{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subject_1 = /*@__PURE__*/require('../../Subject');\n\nvar Subscriber_1 = /*@__PURE__*/require('../../Subscriber');\n\nvar Observable_1 = /*@__PURE__*/require('../../Observable');\n\nvar Subscription_1 = /*@__PURE__*/require('../../Subscription');\n\nvar root_1 = /*@__PURE__*/require('../../util/root');\n\nvar ReplaySubject_1 = /*@__PURE__*/require('../../ReplaySubject');\n\nvar tryCatch_1 = /*@__PURE__*/require('../../util/tryCatch');\n\nvar errorObject_1 = /*@__PURE__*/require('../../util/errorObject');\n\nvar assign_1 = /*@__PURE__*/require('../../util/assign');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\n\n\nvar WebSocketSubject = function (_super) {\n  __extends(WebSocketSubject, _super);\n\n  function WebSocketSubject(urlConfigOrSource, destination) {\n    if (urlConfigOrSource instanceof Observable_1.Observable) {\n      _super.call(this, destination, urlConfigOrSource);\n    } else {\n      _super.call(this);\n\n      this.WebSocketCtor = root_1.root.WebSocket;\n      this._output = new Subject_1.Subject();\n\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign_1.assign(this, urlConfigOrSource);\n      }\n\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n\n      this.destination = new ReplaySubject_1.ReplaySubject();\n    }\n  }\n\n  WebSocketSubject.prototype.resultSelector = function (e) {\n    return JSON.parse(e.data);\n  };\n  /**\n   * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n   *\n   * @example <caption>Wraps browser WebSocket</caption>\n   *\n   * let socket$ = Observable.webSocket('ws://localhost:8081');\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>\n   *\n   * import { w3cwebsocket } from 'websocket';\n   *\n   * let socket$ = Observable.webSocket({\n   *   url: 'ws://localhost:8081',\n   *   WebSocketCtor: w3cwebsocket\n   * });\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n\n\n  WebSocketSubject.create = function (urlConfigOrSource) {\n    return new WebSocketSubject(urlConfigOrSource);\n  };\n\n  WebSocketSubject.prototype.lift = function (operator) {\n    var sock = new WebSocketSubject(this, this.destination);\n    sock.operator = operator;\n    return sock;\n  };\n\n  WebSocketSubject.prototype._resetState = function () {\n    this.socket = null;\n\n    if (!this.source) {\n      this.destination = new ReplaySubject_1.ReplaySubject();\n    }\n\n    this._output = new Subject_1.Subject();\n  }; // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n\n\n  WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) {\n    var self = this;\n    return new Observable_1.Observable(function (observer) {\n      var result = tryCatch_1.tryCatch(subMsg)();\n\n      if (result === errorObject_1.errorObject) {\n        observer.error(errorObject_1.errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      var subscription = self.subscribe(function (x) {\n        var result = tryCatch_1.tryCatch(messageFilter)(x);\n\n        if (result === errorObject_1.errorObject) {\n          observer.error(errorObject_1.errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      }, function (err) {\n        return observer.error(err);\n      }, function () {\n        return observer.complete();\n      });\n      return function () {\n        var result = tryCatch_1.tryCatch(unsubMsg)();\n\n        if (result === errorObject_1.errorObject) {\n          observer.error(errorObject_1.errorObject.e);\n        } else {\n          self.next(result);\n        }\n\n        subscription.unsubscribe();\n      };\n    });\n  };\n\n  WebSocketSubject.prototype._connectSocket = function () {\n    var _this = this;\n\n    var WebSocketCtor = this.WebSocketCtor;\n    var observer = this._output;\n    var socket = null;\n\n    try {\n      socket = this.protocol ? new WebSocketCtor(this.url, this.protocol) : new WebSocketCtor(this.url);\n      this.socket = socket;\n\n      if (this.binaryType) {\n        this.socket.binaryType = this.binaryType;\n      }\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    var subscription = new Subscription_1.Subscription(function () {\n      _this.socket = null;\n\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = function (e) {\n      var openObserver = _this.openObserver;\n\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      var queue = _this.destination;\n      _this.destination = Subscriber_1.Subscriber.create(function (x) {\n        return socket.readyState === 1 && socket.send(x);\n      }, function (e) {\n        var closingObserver = _this.closingObserver;\n\n        if (closingObserver) {\n          closingObserver.next(undefined);\n        }\n\n        if (e && e.code) {\n          socket.close(e.code, e.reason);\n        } else {\n          observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' + 'and an optional reason: { code: number, reason: string }'));\n        }\n\n        _this._resetState();\n      }, function () {\n        var closingObserver = _this.closingObserver;\n\n        if (closingObserver) {\n          closingObserver.next(undefined);\n        }\n\n        socket.close();\n\n        _this._resetState();\n      });\n\n      if (queue && queue instanceof ReplaySubject_1.ReplaySubject) {\n        subscription.add(queue.subscribe(_this.destination));\n      }\n    };\n\n    socket.onerror = function (e) {\n      _this._resetState();\n\n      observer.error(e);\n    };\n\n    socket.onclose = function (e) {\n      _this._resetState();\n\n      var closeObserver = _this.closeObserver;\n\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = function (e) {\n      var result = tryCatch_1.tryCatch(_this.resultSelector)(e);\n\n      if (result === errorObject_1.errorObject) {\n        observer.error(errorObject_1.errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  };\n  /** @deprecated internal use only */\n\n\n  WebSocketSubject.prototype._subscribe = function (subscriber) {\n    var _this = this;\n\n    var source = this.source;\n\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n\n    if (!this.socket) {\n      this._connectSocket();\n    }\n\n    var subscription = new Subscription_1.Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(function () {\n      var socket = _this.socket;\n\n      if (_this._output.observers.length === 0) {\n        if (socket && socket.readyState === 1) {\n          socket.close();\n        }\n\n        _this._resetState();\n      }\n    });\n    return subscription;\n  };\n\n  WebSocketSubject.prototype.unsubscribe = function () {\n    var _a = this,\n        source = _a.source,\n        socket = _a.socket;\n\n    if (socket && socket.readyState === 1) {\n      socket.close();\n\n      this._resetState();\n    }\n\n    _super.prototype.unsubscribe.call(this);\n\n    if (!source) {\n      this.destination = new ReplaySubject_1.ReplaySubject();\n    }\n  };\n\n  return WebSocketSubject;\n}(Subject_1.AnonymousSubject);\n\nexports.WebSocketSubject = WebSocketSubject;","map":null,"metadata":{},"sourceType":"script"}