{"ast":null,"code":"\"use strict\";\n\nvar URL = require('./URL');\n\nmodule.exports = URLUtils; // Allow the `x == null` pattern.  This is eslint's \"null: 'ignore'\" option,\n// but jshint doesn't support this.\n\n/* jshint eqeqeq: false */\n// This is an abstract superclass for Location, HTMLAnchorElement and\n// other types that have the standard complement of \"URL decomposition\n// IDL attributes\".  This is now standardized as URLUtils, see:\n// https://url.spec.whatwg.org/#urlutils\n// Subclasses must define a getter/setter on href.\n// The getter and setter methods parse and rebuild the URL on each\n// invocation; there is no attempt to cache the value and be more efficient\n\nfunction URLUtils() {}\n\nURLUtils.prototype = Object.create(Object.prototype, {\n  _url: {\n    get: function get() {\n      // XXX: this should do the \"Reinitialize url\" steps, and \"null\" should\n      // be a valid return value.\n      return new URL(this.href);\n    }\n  },\n  protocol: {\n    get: function get() {\n      var url = this._url;\n      if (url && url.scheme) return url.scheme + \":\";else return \":\";\n    },\n    set: function set(v) {\n      var output = this.href;\n      var url = new URL(output);\n\n      if (url.isAbsolute()) {\n        v = v.replace(/:+$/, \"\");\n        v = v.replace(/[^-+\\.a-zA-Z0-9]/g, URL.percentEncode);\n\n        if (v.length > 0) {\n          url.scheme = v;\n          output = url.toString();\n        }\n      }\n\n      this.href = output;\n    }\n  },\n  host: {\n    get: function get() {\n      var url = this._url;\n      if (url.isAbsolute() && url.isAuthorityBased()) return url.host + (url.port ? \":\" + url.port : \"\");else return \"\";\n    },\n    set: function set(v) {\n      var output = this.href;\n      var url = new URL(output);\n\n      if (url.isAbsolute() && url.isAuthorityBased()) {\n        v = v.replace(/[^-+\\._~!$&'()*,;:=a-zA-Z0-9]/g, URL.percentEncode);\n\n        if (v.length > 0) {\n          url.host = v;\n          delete url.port;\n          output = url.toString();\n        }\n      }\n\n      this.href = output;\n    }\n  },\n  hostname: {\n    get: function get() {\n      var url = this._url;\n      if (url.isAbsolute() && url.isAuthorityBased()) return url.host;else return \"\";\n    },\n    set: function set(v) {\n      var output = this.href;\n      var url = new URL(output);\n\n      if (url.isAbsolute() && url.isAuthorityBased()) {\n        v = v.replace(/^\\/+/, \"\");\n        v = v.replace(/[^-+\\._~!$&'()*,;:=a-zA-Z0-9]/g, URL.percentEncode);\n\n        if (v.length > 0) {\n          url.host = v;\n          output = url.toString();\n        }\n      }\n\n      this.href = output;\n    }\n  },\n  port: {\n    get: function get() {\n      var url = this._url;\n      if (url.isAbsolute() && url.isAuthorityBased() && url.port !== undefined) return url.port;else return \"\";\n    },\n    set: function set(v) {\n      var output = this.href;\n      var url = new URL(output);\n\n      if (url.isAbsolute() && url.isAuthorityBased()) {\n        v = '' + v;\n        v = v.replace(/[^0-9].*$/, \"\");\n        v = v.replace(/^0+/, \"\");\n        if (v.length === 0) v = \"0\";\n\n        if (parseInt(v, 10) <= 65535) {\n          url.port = v;\n          output = url.toString();\n        }\n      }\n\n      this.href = output;\n    }\n  },\n  pathname: {\n    get: function get() {\n      var url = this._url;\n      if (url.isAbsolute() && url.isHierarchical()) return url.path;else return \"\";\n    },\n    set: function set(v) {\n      var output = this.href;\n      var url = new URL(output);\n\n      if (url.isAbsolute() && url.isHierarchical()) {\n        if (v.charAt(0) !== \"/\") v = \"/\" + v;\n        v = v.replace(/[^-+\\._~!$&'()*,;:=@\\/a-zA-Z0-9]/g, URL.percentEncode);\n        url.path = v;\n        output = url.toString();\n      }\n\n      this.href = output;\n    }\n  },\n  search: {\n    get: function get() {\n      var url = this._url;\n      if (url.isAbsolute() && url.isHierarchical() && url.query !== undefined) return \"?\" + url.query;else return \"\";\n    },\n    set: function set(v) {\n      var output = this.href;\n      var url = new URL(output);\n\n      if (url.isAbsolute() && url.isHierarchical()) {\n        if (v.charAt(0) === \"?\") v = v.substring(1);\n        v = v.replace(/[^-+\\._~!$&'()*,;:=@\\/?a-zA-Z0-9]/g, URL.percentEncode);\n        url.query = v;\n        output = url.toString();\n      }\n\n      this.href = output;\n    }\n  },\n  hash: {\n    get: function get() {\n      var url = this._url;\n\n      if (url == null || url.fragment == null || url.fragment === '') {\n        return \"\";\n      } else {\n        return \"#\" + url.fragment;\n      }\n    },\n    set: function set(v) {\n      var output = this.href;\n      var url = new URL(output);\n      if (v.charAt(0) === \"#\") v = v.substring(1);\n      v = v.replace(/[^-+\\._~!$&'()*,;:=@\\/?a-zA-Z0-9]/g, URL.percentEncode);\n      url.fragment = v;\n      output = url.toString();\n      this.href = output;\n    }\n  },\n  username: {\n    get: function get() {\n      var url = this._url;\n      return url.username || '';\n    },\n    set: function set(v) {\n      var output = this.href;\n      var url = new URL(output);\n\n      if (url.isAbsolute()) {\n        v = v.replace(/[\\x00-\\x1F\\x7F-\\uFFFF \"#<>?`\\/@\\\\:]/g, URL.percentEncode);\n        url.username = v;\n        output = url.toString();\n      }\n\n      this.href = output;\n    }\n  },\n  password: {\n    get: function get() {\n      var url = this._url;\n      return url.password || '';\n    },\n    set: function set(v) {\n      var output = this.href;\n      var url = new URL(output);\n\n      if (url.isAbsolute()) {\n        if (v === '') {\n          url.password = null;\n        } else {\n          v = v.replace(/[\\x00-\\x1F\\x7F-\\uFFFF \"#<>?`\\/@\\\\]/g, URL.percentEncode);\n          url.password = v;\n        }\n\n        output = url.toString();\n      }\n\n      this.href = output;\n    }\n  },\n  origin: {\n    get: function get() {\n      var url = this._url;\n\n      if (url == null) {\n        return '';\n      }\n\n      var originForPort = function originForPort(defaultPort) {\n        var origin = [url.scheme, url.host, +url.port || defaultPort]; // XXX should be \"unicode serialization\"\n\n        return origin[0] + '://' + origin[1] + (origin[2] === defaultPort ? '' : ':' + origin[2]);\n      };\n\n      switch (url.scheme) {\n        case 'ftp':\n          return originForPort(21);\n\n        case 'gopher':\n          return originForPort(70);\n\n        case 'http':\n        case 'ws':\n          return originForPort(80);\n\n        case 'https':\n        case 'wss':\n          return originForPort(443);\n\n        default:\n          // this is what chrome does\n          return url.scheme + '://';\n      }\n    }\n  }\n  /*\n  searchParams: {\n    get: function() {\n      var url = this._url;\n      // XXX\n    },\n    set: function(v) {\n      var output = this.href;\n      var url = new URL(output);\n      // XXX\n      this.href = output;\n    },\n  },\n  */\n\n});\n\nURLUtils._inherit = function (proto) {\n  // copy getters/setters from URLUtils to o.\n  Object.getOwnPropertyNames(URLUtils.prototype).forEach(function (p) {\n    if (p === 'constructor' || p === 'href') {\n      return;\n    }\n\n    var desc = Object.getOwnPropertyDescriptor(URLUtils.prototype, p);\n    Object.defineProperty(proto, p, desc);\n  });\n};","map":null,"metadata":{},"sourceType":"script"}