{"ast":null,"code":"import _possibleConstructorReturn from \"/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _isNativeReflectConstruct from \"/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct\";\nimport _getPrototypeOf from \"/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nguyenlong/Project/BirdNest/client-website-BirdNest/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n\nimport { Injectable, ɵɵdefineInjectable, forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, Input, Output, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nimport { MiniStore, MiniState } from 'ngx-bootstrap/mini-ngrx';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction TimepickerComponent_td_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\");\n    ɵngcc0.ɵɵtext(1, \"\\xA0\\xA0\\xA0\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TimepickerComponent_td_7_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r19 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"td\");\n    ɵngcc0.ɵɵelementStart(1, \"a\", 1);\n    ɵngcc0.ɵɵlistener(\"click\", function TimepickerComponent_td_7_Template_a_click_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r19);\n      var ctx_r18 = ɵngcc0.ɵɵnextContext();\n      return ctx_r18.changeMinutes(ctx_r18.minuteStep);\n    });\n    ɵngcc0.ɵɵelement(2, \"span\", 2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"disabled\", !ctx_r1.canIncrementMinutes || !ctx_r1.isEditable);\n  }\n}\n\nfunction TimepickerComponent_td_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\");\n    ɵngcc0.ɵɵtext(1, \"\\xA0\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TimepickerComponent_td_9_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r21 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"td\");\n    ɵngcc0.ɵɵelementStart(1, \"a\", 1);\n    ɵngcc0.ɵɵlistener(\"click\", function TimepickerComponent_td_9_Template_a_click_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r21);\n      var ctx_r20 = ɵngcc0.ɵɵnextContext();\n      return ctx_r20.changeSeconds(ctx_r20.secondsStep);\n    });\n    ɵngcc0.ɵɵelement(2, \"span\", 2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"disabled\", !ctx_r3.canIncrementSeconds || !ctx_r3.isEditable);\n  }\n}\n\nfunction TimepickerComponent_td_10_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\");\n    ɵngcc0.ɵɵtext(1, \"\\xA0\\xA0\\xA0\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TimepickerComponent_td_11_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"td\");\n  }\n}\n\nfunction TimepickerComponent_td_15_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\");\n    ɵngcc0.ɵɵtext(1, \"\\xA0:\\xA0\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TimepickerComponent_td_16_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r23 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"td\", 4);\n    ɵngcc0.ɵɵelementStart(1, \"input\", 5);\n    ɵngcc0.ɵɵlistener(\"wheel\", function TimepickerComponent_td_16_Template_input_wheel_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r23);\n      var ctx_r22 = ɵngcc0.ɵɵnextContext();\n      ctx_r22.prevDef($event);\n      return ctx_r22.changeMinutes(ctx_r22.minuteStep * ctx_r22.wheelSign($event), \"wheel\");\n    })(\"keydown.ArrowUp\", function TimepickerComponent_td_16_Template_input_keydown_ArrowUp_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r23);\n      var ctx_r24 = ɵngcc0.ɵɵnextContext();\n      return ctx_r24.changeMinutes(ctx_r24.minuteStep, \"key\");\n    })(\"keydown.ArrowDown\", function TimepickerComponent_td_16_Template_input_keydown_ArrowDown_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r23);\n      var ctx_r25 = ɵngcc0.ɵɵnextContext();\n      return ctx_r25.changeMinutes(-ctx_r25.minuteStep, \"key\");\n    })(\"change\", function TimepickerComponent_td_16_Template_input_change_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r23);\n      var ctx_r26 = ɵngcc0.ɵɵnextContext();\n      return ctx_r26.updateMinutes($event.target.value);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r7 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"has-error\", ctx_r7.invalidMinutes);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"is-invalid\", ctx_r7.invalidMinutes);\n    ɵngcc0.ɵɵproperty(\"placeholder\", ctx_r7.minutesPlaceholder)(\"readonly\", ctx_r7.readonlyInput)(\"disabled\", ctx_r7.disabled)(\"value\", ctx_r7.minutes);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r7.labelMinutes);\n  }\n}\n\nfunction TimepickerComponent_td_17_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\");\n    ɵngcc0.ɵɵtext(1, \"\\xA0:\\xA0\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TimepickerComponent_td_18_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r28 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"td\", 4);\n    ɵngcc0.ɵɵelementStart(1, \"input\", 5);\n    ɵngcc0.ɵɵlistener(\"wheel\", function TimepickerComponent_td_18_Template_input_wheel_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r28);\n      var ctx_r27 = ɵngcc0.ɵɵnextContext();\n      ctx_r27.prevDef($event);\n      return ctx_r27.changeSeconds(ctx_r27.secondsStep * ctx_r27.wheelSign($event), \"wheel\");\n    })(\"keydown.ArrowUp\", function TimepickerComponent_td_18_Template_input_keydown_ArrowUp_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r28);\n      var ctx_r29 = ɵngcc0.ɵɵnextContext();\n      return ctx_r29.changeSeconds(ctx_r29.secondsStep, \"key\");\n    })(\"keydown.ArrowDown\", function TimepickerComponent_td_18_Template_input_keydown_ArrowDown_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r28);\n      var ctx_r30 = ɵngcc0.ɵɵnextContext();\n      return ctx_r30.changeSeconds(-ctx_r30.secondsStep, \"key\");\n    })(\"change\", function TimepickerComponent_td_18_Template_input_change_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r28);\n      var ctx_r31 = ɵngcc0.ɵɵnextContext();\n      return ctx_r31.updateSeconds($event.target.value);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r9 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"has-error\", ctx_r9.invalidSeconds);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"is-invalid\", ctx_r9.invalidSeconds);\n    ɵngcc0.ɵɵproperty(\"placeholder\", ctx_r9.secondsPlaceholder)(\"readonly\", ctx_r9.readonlyInput)(\"disabled\", ctx_r9.disabled)(\"value\", ctx_r9.seconds);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r9.labelSeconds);\n  }\n}\n\nfunction TimepickerComponent_td_19_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\");\n    ɵngcc0.ɵɵtext(1, \"\\xA0\\xA0\\xA0\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TimepickerComponent_td_20_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r33 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"td\");\n    ɵngcc0.ɵɵelementStart(1, \"button\", 8);\n    ɵngcc0.ɵɵlistener(\"click\", function TimepickerComponent_td_20_Template_button_click_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r33);\n      var ctx_r32 = ɵngcc0.ɵɵnextContext();\n      return ctx_r32.toggleMeridian();\n    });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r11 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"disabled\", !ctx_r11.isEditable || !ctx_r11.canToggleMeridian);\n    ɵngcc0.ɵɵproperty(\"disabled\", !ctx_r11.isEditable || !ctx_r11.canToggleMeridian);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\"\", ctx_r11.meridian, \" \");\n  }\n}\n\nfunction TimepickerComponent_td_25_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\");\n    ɵngcc0.ɵɵtext(1, \"\\xA0\\xA0\\xA0\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TimepickerComponent_td_26_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r35 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"td\");\n    ɵngcc0.ɵɵelementStart(1, \"a\", 1);\n    ɵngcc0.ɵɵlistener(\"click\", function TimepickerComponent_td_26_Template_a_click_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r35);\n      var ctx_r34 = ɵngcc0.ɵɵnextContext();\n      return ctx_r34.changeMinutes(-ctx_r34.minuteStep);\n    });\n    ɵngcc0.ɵɵelement(2, \"span\", 7);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r13 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"disabled\", !ctx_r13.canDecrementMinutes || !ctx_r13.isEditable);\n  }\n}\n\nfunction TimepickerComponent_td_27_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\");\n    ɵngcc0.ɵɵtext(1, \"\\xA0\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TimepickerComponent_td_28_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r37 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"td\");\n    ɵngcc0.ɵɵelementStart(1, \"a\", 1);\n    ɵngcc0.ɵɵlistener(\"click\", function TimepickerComponent_td_28_Template_a_click_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r37);\n      var ctx_r36 = ɵngcc0.ɵɵnextContext();\n      return ctx_r36.changeSeconds(-ctx_r36.secondsStep);\n    });\n    ɵngcc0.ɵɵelement(2, \"span\", 7);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r15 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"disabled\", !ctx_r15.canDecrementSeconds || !ctx_r15.isEditable);\n  }\n}\n\nfunction TimepickerComponent_td_29_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\");\n    ɵngcc0.ɵɵtext(1, \"\\xA0\\xA0\\xA0\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TimepickerComponent_td_30_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"td\");\n  }\n}\n\nvar TimepickerActions = /*#__PURE__*/function () {\n  function TimepickerActions() {\n    _classCallCheck(this, TimepickerActions);\n  }\n\n  return _createClass(TimepickerActions, [{\n    key: \"writeValue\",\n    value:\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    function writeValue(value) {\n      return {\n        type: TimepickerActions.WRITE_VALUE,\n        payload: value\n      };\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"changeHours\",\n    value: function changeHours(event) {\n      return {\n        type: TimepickerActions.CHANGE_HOURS,\n        payload: event\n      };\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"changeMinutes\",\n    value: function changeMinutes(event) {\n      return {\n        type: TimepickerActions.CHANGE_MINUTES,\n        payload: event\n      };\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"changeSeconds\",\n    value: function changeSeconds(event) {\n      return {\n        type: TimepickerActions.CHANGE_SECONDS,\n        payload: event\n      };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"setTime\",\n    value: function setTime(value) {\n      return {\n        type: TimepickerActions.SET_TIME_UNIT,\n        payload: value\n      };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateControls\",\n    value: function updateControls(value) {\n      return {\n        type: TimepickerActions.UPDATE_CONTROLS,\n        payload: value\n      };\n    }\n  }]);\n}();\n\nTimepickerActions.ɵfac = function TimepickerActions_Factory(t) {\n  return new (t || TimepickerActions)();\n};\n\nTimepickerActions.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: TimepickerActions,\n  factory: TimepickerActions.ɵfac\n});\nTimepickerActions.WRITE_VALUE = '[timepicker] write value from ng model';\nTimepickerActions.CHANGE_HOURS = '[timepicker] change hours';\nTimepickerActions.CHANGE_MINUTES = '[timepicker] change minutes';\nTimepickerActions.CHANGE_SECONDS = '[timepicker] change seconds';\nTimepickerActions.SET_TIME_UNIT = '[timepicker] set time unit';\nTimepickerActions.UPDATE_CONTROLS = '[timepicker] update controls';\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TimepickerActions, [{\n    type: Injectable\n  }], null, null);\n})();\n\nif (false) {\n  /** @type {?} */\n  TimepickerActions.WRITE_VALUE;\n  /** @type {?} */\n\n  TimepickerActions.CHANGE_HOURS;\n  /** @type {?} */\n\n  TimepickerActions.CHANGE_MINUTES;\n  /** @type {?} */\n\n  TimepickerActions.CHANGE_SECONDS;\n  /** @type {?} */\n\n  TimepickerActions.SET_TIME_UNIT;\n  /** @type {?} */\n\n  TimepickerActions.UPDATE_CONTROLS;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar dex = 10;\n/** @type {?} */\n\nvar hoursPerDay = 24;\n/** @type {?} */\n\nvar hoursPerDayHalf = 12;\n/** @type {?} */\n\nvar minutesPerHour = 60;\n/** @type {?} */\n\nvar secondsPerMinute = 60;\n/**\n * @param {?=} value\n * @return {?}\n */\n\nfunction isValidDate(value) {\n  if (!value) {\n    return false;\n  }\n\n  if (value instanceof Date && isNaN(value.getHours())) {\n    return false;\n  }\n\n  if (typeof value === 'string') {\n    return isValidDate(new Date(value));\n  }\n\n  return true;\n}\n/**\n * @param {?} controls\n * @param {?} newDate\n * @return {?}\n */\n\n\nfunction isValidLimit(controls, newDate) {\n  if (controls.min && newDate < controls.min) {\n    return false;\n  }\n\n  if (controls.max && newDate > controls.max) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * @param {?} value\n * @return {?}\n */\n\n\nfunction toNumber(value) {\n  if (typeof value === 'number') {\n    return value;\n  }\n\n  return parseInt(value, dex);\n}\n/**\n * @param {?} value\n * @return {?}\n */\n\n\nfunction isNumber(value) {\n  return !isNaN(toNumber(value));\n}\n/**\n * @param {?} value\n * @param {?=} isPM\n * @return {?}\n */\n\n\nfunction parseHours(value) {\n  var isPM = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  /** @type {?} */\n  var hour = toNumber(value);\n\n  if (isNaN(hour) || hour < 0 || hour > (isPM ? hoursPerDayHalf : hoursPerDay)) {\n    return NaN;\n  }\n\n  return hour;\n}\n/**\n * @param {?} value\n * @return {?}\n */\n\n\nfunction parseMinutes(value) {\n  /** @type {?} */\n  var minute = toNumber(value);\n\n  if (isNaN(minute) || minute < 0 || minute > minutesPerHour) {\n    return NaN;\n  }\n\n  return minute;\n}\n/**\n * @param {?} value\n * @return {?}\n */\n\n\nfunction parseSeconds(value) {\n  /** @type {?} */\n  var seconds = toNumber(value);\n\n  if (isNaN(seconds) || seconds < 0 || seconds > secondsPerMinute) {\n    return NaN;\n  }\n\n  return seconds;\n}\n/**\n * @param {?} value\n * @return {?}\n */\n\n\nfunction parseTime(value) {\n  if (typeof value === 'string') {\n    return new Date(value);\n  }\n\n  return value;\n}\n/**\n * @param {?} value\n * @param {?} diff\n * @return {?}\n */\n\n\nfunction changeTime(value, diff) {\n  if (!value) {\n    return changeTime(createDate(new Date(), 0, 0, 0), diff);\n  }\n  /** @type {?} */\n\n\n  var hour = value.getHours();\n  /** @type {?} */\n\n  var minutes = value.getMinutes();\n  /** @type {?} */\n\n  var seconds = value.getSeconds();\n\n  if (diff.hour) {\n    hour = hour + toNumber(diff.hour);\n  }\n\n  if (diff.minute) {\n    minutes = minutes + toNumber(diff.minute);\n  }\n\n  if (diff.seconds) {\n    seconds = seconds + toNumber(diff.seconds);\n  }\n\n  return createDate(value, hour, minutes, seconds);\n}\n/**\n * @param {?} value\n * @param {?} opts\n * @return {?}\n */\n\n\nfunction setTime(value, opts) {\n  /** @type {?} */\n  var hour = parseHours(opts.hour);\n  /** @type {?} */\n\n  var minute = parseMinutes(opts.minute);\n  /** @type {?} */\n\n  var seconds = parseSeconds(opts.seconds) || 0;\n\n  if (opts.isPM && hour !== 12) {\n    hour += hoursPerDayHalf;\n  }\n\n  if (!value) {\n    if (!isNaN(hour) && !isNaN(minute)) {\n      return createDate(new Date(), hour, minute, seconds);\n    }\n\n    return value;\n  }\n\n  if (isNaN(hour) || isNaN(minute)) {\n    return value;\n  }\n\n  return createDate(value, hour, minute, seconds);\n}\n/**\n * @param {?} value\n * @param {?} hours\n * @param {?} minutes\n * @param {?} seconds\n * @return {?}\n */\n\n\nfunction createDate(value, hours, minutes, seconds) {\n  /** @type {?} */\n  var newValue = new Date(value.getFullYear(), value.getMonth(), value.getDate(), hours, minutes, seconds, value.getMilliseconds()); // #3139 ensure date part remains unchanged\n\n  newValue.setFullYear(value.getFullYear());\n  newValue.setMonth(value.getMonth());\n  newValue.setDate(value.getDate());\n  return newValue;\n}\n/**\n * @param {?} value\n * @return {?}\n */\n\n\nfunction padNumber(value) {\n  /** @type {?} */\n  var _value = value.toString();\n\n  if (_value.length > 1) {\n    return _value;\n  }\n\n  return \"0\".concat(_value);\n}\n/**\n * @param {?} hours\n * @param {?} isPM\n * @return {?}\n */\n\n\nfunction isHourInputValid(hours, isPM) {\n  return !isNaN(parseHours(hours, isPM));\n}\n/**\n * @param {?} minutes\n * @return {?}\n */\n\n\nfunction isMinuteInputValid(minutes) {\n  return !isNaN(parseMinutes(minutes));\n}\n/**\n * @param {?} seconds\n * @return {?}\n */\n\n\nfunction isSecondInputValid(seconds) {\n  return !isNaN(parseSeconds(seconds));\n}\n/**\n * @param {?} diff\n * @param {?} max\n * @param {?} min\n * @return {?}\n */\n\n\nfunction isInputLimitValid(diff, max, min) {\n  /** @type {?} */\n  var newDate = setTime(new Date(), diff);\n\n  if (max && newDate > max) {\n    return false;\n  }\n\n  if (min && newDate < min) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * @param {?} hours\n * @param {?=} minutes\n * @param {?=} seconds\n * @param {?=} isPM\n * @return {?}\n */\n\n\nfunction isInputValid(hours) {\n  var minutes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';\n  var seconds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '0';\n  var isPM = arguments.length > 3 ? arguments[3] : undefined;\n  return isHourInputValid(hours, isPM) && isMinuteInputValid(minutes) && isSecondInputValid(seconds);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} state\n * @param {?=} event\n * @return {?}\n */\n\n\nfunction canChangeValue(state, event) {\n  if (state.readonlyInput || state.disabled) {\n    return false;\n  }\n\n  if (event) {\n    if (event.source === 'wheel' && !state.mousewheel) {\n      return false;\n    }\n\n    if (event.source === 'key' && !state.arrowkeys) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * @param {?} event\n * @param {?} controls\n * @return {?}\n */\n\n\nfunction canChangeHours(event, controls) {\n  if (!event.step) {\n    return false;\n  }\n\n  if (event.step > 0 && !controls.canIncrementHours) {\n    return false;\n  }\n\n  if (event.step < 0 && !controls.canDecrementHours) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * @param {?} event\n * @param {?} controls\n * @return {?}\n */\n\n\nfunction canChangeMinutes(event, controls) {\n  if (!event.step) {\n    return false;\n  }\n\n  if (event.step > 0 && !controls.canIncrementMinutes) {\n    return false;\n  }\n\n  if (event.step < 0 && !controls.canDecrementMinutes) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * @param {?} event\n * @param {?} controls\n * @return {?}\n */\n\n\nfunction canChangeSeconds(event, controls) {\n  if (!event.step) {\n    return false;\n  }\n\n  if (event.step > 0 && !controls.canIncrementSeconds) {\n    return false;\n  }\n\n  if (event.step < 0 && !controls.canDecrementSeconds) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * @param {?} state\n * @return {?}\n */\n\n\nfunction getControlsValue(state) {\n  var hourStep = state.hourStep,\n      minuteStep = state.minuteStep,\n      secondsStep = state.secondsStep,\n      readonlyInput = state.readonlyInput,\n      disabled = state.disabled,\n      mousewheel = state.mousewheel,\n      arrowkeys = state.arrowkeys,\n      showSpinners = state.showSpinners,\n      showMeridian = state.showMeridian,\n      showSeconds = state.showSeconds,\n      meridians = state.meridians,\n      min = state.min,\n      max = state.max;\n  return {\n    hourStep: hourStep,\n    minuteStep: minuteStep,\n    secondsStep: secondsStep,\n    readonlyInput: readonlyInput,\n    disabled: disabled,\n    mousewheel: mousewheel,\n    arrowkeys: arrowkeys,\n    showSpinners: showSpinners,\n    showMeridian: showMeridian,\n    showSeconds: showSeconds,\n    meridians: meridians,\n    min: min,\n    max: max\n  };\n}\n/**\n * @param {?} value\n * @param {?} state\n * @return {?}\n */\n\n\nfunction timepickerControls(value, state) {\n  /** @type {?} */\n  var hoursPerDay = 24;\n  /** @type {?} */\n\n  var hoursPerDayHalf = 12;\n  var min = state.min,\n      max = state.max,\n      hourStep = state.hourStep,\n      minuteStep = state.minuteStep,\n      secondsStep = state.secondsStep,\n      showSeconds = state.showSeconds;\n  /** @type {?} */\n\n  var res = {\n    canIncrementHours: true,\n    canIncrementMinutes: true,\n    canIncrementSeconds: true,\n    canDecrementHours: true,\n    canDecrementMinutes: true,\n    canDecrementSeconds: true,\n    canToggleMeridian: true\n  };\n\n  if (!value) {\n    return res;\n  } // compare dates\n\n\n  if (max) {\n    /** @type {?} */\n    var _newHour = changeTime(value, {\n      hour: hourStep\n    });\n\n    res.canIncrementHours = max > _newHour && value.getHours() + hourStep < hoursPerDay;\n\n    if (!res.canIncrementHours) {\n      /** @type {?} */\n      var _newMinutes = changeTime(value, {\n        minute: minuteStep\n      });\n\n      res.canIncrementMinutes = showSeconds ? max > _newMinutes : max >= _newMinutes;\n    }\n\n    if (!res.canIncrementMinutes) {\n      /** @type {?} */\n      var _newSeconds = changeTime(value, {\n        seconds: secondsStep\n      });\n\n      res.canIncrementSeconds = max >= _newSeconds;\n    }\n\n    if (value.getHours() < hoursPerDayHalf) {\n      res.canToggleMeridian = changeTime(value, {\n        hour: hoursPerDayHalf\n      }) < max;\n    }\n  }\n\n  if (min) {\n    /** @type {?} */\n    var _newHour2 = changeTime(value, {\n      hour: -hourStep\n    });\n\n    res.canDecrementHours = min < _newHour2;\n\n    if (!res.canDecrementHours) {\n      /** @type {?} */\n      var _newMinutes2 = changeTime(value, {\n        minute: -minuteStep\n      });\n\n      res.canDecrementMinutes = showSeconds ? min < _newMinutes2 : min <= _newMinutes2;\n    }\n\n    if (!res.canDecrementMinutes) {\n      /** @type {?} */\n      var _newSeconds2 = changeTime(value, {\n        seconds: -secondsStep\n      });\n\n      res.canDecrementSeconds = min <= _newSeconds2;\n    }\n\n    if (value.getHours() >= hoursPerDayHalf) {\n      res.canToggleMeridian = changeTime(value, {\n        hour: -hoursPerDayHalf\n      }) > min;\n    }\n  }\n\n  return res;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Provides default configuration values for timepicker\n */\n\n\nvar TimepickerConfig = /*#__PURE__*/_createClass(function TimepickerConfig() {\n  _classCallCheck(this, TimepickerConfig);\n\n  /**\n   * hours change step\n   */\n  this.hourStep = 1;\n  /**\n   * minutes change step\n   */\n\n  this.minuteStep = 5;\n  /**\n   * seconds changes step\n   */\n\n  this.secondsStep = 10;\n  /**\n   * if true works in 12H mode and displays AM/PM. If false works in 24H mode and hides AM/PM\n   */\n\n  this.showMeridian = true;\n  /**\n   * meridian labels based on locale\n   */\n\n  this.meridians = ['AM', 'PM'];\n  /**\n   * if true hours and minutes fields will be readonly\n   */\n\n  this.readonlyInput = false;\n  /**\n   * if true hours and minutes fields will be disabled\n   */\n\n  this.disabled = false;\n  /**\n   * if true scroll inside hours and minutes inputs will change time\n   */\n\n  this.mousewheel = true;\n  /**\n   * if true the values of hours and minutes can be changed using the up/down arrow keys on the keyboard\n   */\n\n  this.arrowkeys = true;\n  /**\n   * if true spinner arrows above and below the inputs will be shown\n   */\n\n  this.showSpinners = true;\n  /**\n   * show seconds in timepicker\n   */\n\n  this.showSeconds = false;\n  /**\n   * show minutes in timepicker\n   */\n\n  this.showMinutes = true;\n  /**\n   * placeholder for hours field in timepicker\n   */\n\n  this.hoursPlaceholder = 'HH';\n  /**\n   * placeholder for minutes field in timepicker\n   */\n\n  this.minutesPlaceholder = 'MM';\n  /**\n   * placeholder for seconds field in timepicker\n   */\n\n  this.secondsPlaceholder = 'SS';\n  /**\n   * hours aria label\n   */\n\n  this.ariaLabelHours = 'hours';\n  /**\n   * minutes aria label\n   */\n\n  this.ariaLabelMinutes = 'minutes';\n  /**\n   * seconds aria label\n   */\n\n  this.ariaLabelSeconds = 'seconds';\n});\n\nTimepickerConfig.ɵfac = function TimepickerConfig_Factory(t) {\n  return new (t || TimepickerConfig)();\n};\n/** @nocollapse */\n\n\nTimepickerConfig.ɵprov = ɵɵdefineInjectable({\n  factory: function TimepickerConfig_Factory() {\n    return new TimepickerConfig();\n  },\n  token: TimepickerConfig,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TimepickerConfig, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * hours change step\n   * @type {?}\n   */\n  TimepickerConfig.prototype.hourStep;\n  /**\n   * minutes change step\n   * @type {?}\n   */\n\n  TimepickerConfig.prototype.minuteStep;\n  /**\n   * seconds changes step\n   * @type {?}\n   */\n\n  TimepickerConfig.prototype.secondsStep;\n  /**\n   * if true works in 12H mode and displays AM/PM. If false works in 24H mode and hides AM/PM\n   * @type {?}\n   */\n\n  TimepickerConfig.prototype.showMeridian;\n  /**\n   * meridian labels based on locale\n   * @type {?}\n   */\n\n  TimepickerConfig.prototype.meridians;\n  /**\n   * if true hours and minutes fields will be readonly\n   * @type {?}\n   */\n\n  TimepickerConfig.prototype.readonlyInput;\n  /**\n   * if true hours and minutes fields will be disabled\n   * @type {?}\n   */\n\n  TimepickerConfig.prototype.disabled;\n  /**\n   * if true scroll inside hours and minutes inputs will change time\n   * @type {?}\n   */\n\n  TimepickerConfig.prototype.mousewheel;\n  /**\n   * if true the values of hours and minutes can be changed using the up/down arrow keys on the keyboard\n   * @type {?}\n   */\n\n  TimepickerConfig.prototype.arrowkeys;\n  /**\n   * if true spinner arrows above and below the inputs will be shown\n   * @type {?}\n   */\n\n  TimepickerConfig.prototype.showSpinners;\n  /**\n   * show seconds in timepicker\n   * @type {?}\n   */\n\n  TimepickerConfig.prototype.showSeconds;\n  /**\n   * show minutes in timepicker\n   * @type {?}\n   */\n\n  TimepickerConfig.prototype.showMinutes;\n  /**\n   * minimum time user can select\n   * @type {?}\n   */\n\n  TimepickerConfig.prototype.min;\n  /**\n   * maximum time user can select\n   * @type {?}\n   */\n\n  TimepickerConfig.prototype.max;\n  /**\n   * placeholder for hours field in timepicker\n   * @type {?}\n   */\n\n  TimepickerConfig.prototype.hoursPlaceholder;\n  /**\n   * placeholder for minutes field in timepicker\n   * @type {?}\n   */\n\n  TimepickerConfig.prototype.minutesPlaceholder;\n  /**\n   * placeholder for seconds field in timepicker\n   * @type {?}\n   */\n\n  TimepickerConfig.prototype.secondsPlaceholder;\n  /**\n   * hours aria label\n   * @type {?}\n   */\n\n  TimepickerConfig.prototype.ariaLabelHours;\n  /**\n   * minutes aria label\n   * @type {?}\n   */\n\n  TimepickerConfig.prototype.ariaLabelMinutes;\n  /**\n   * seconds aria label\n   * @type {?}\n   */\n\n  TimepickerConfig.prototype.ariaLabelSeconds;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar TimepickerState = /*#__PURE__*/_createClass(function TimepickerState() {\n  _classCallCheck(this, TimepickerState);\n});\n\nif (false) {\n  /** @type {?} */\n  TimepickerState.prototype.value;\n  /** @type {?} */\n\n  TimepickerState.prototype.config;\n  /** @type {?} */\n\n  TimepickerState.prototype.controls;\n}\n/** @type {?} */\n\n\nvar initialState = {\n  value: null,\n  config: new TimepickerConfig(),\n  controls: {\n    canIncrementHours: true,\n    canIncrementMinutes: true,\n    canIncrementSeconds: true,\n    canDecrementHours: true,\n    canDecrementMinutes: true,\n    canDecrementSeconds: true,\n    canToggleMeridian: true\n  }\n}; // tslint:disable-next-line:cyclomatic-complexity\n\n/**\n * @param {?=} state\n * @param {?=} action\n * @return {?}\n */\n\nfunction timepickerReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case TimepickerActions.WRITE_VALUE:\n      {\n        return Object.assign({}, state, {\n          value: action.payload\n        });\n      }\n\n    case TimepickerActions.CHANGE_HOURS:\n      {\n        if (!canChangeValue(state.config, action.payload) || !canChangeHours(action.payload, state.controls)) {\n          return state;\n        }\n        /** @type {?} */\n\n\n        var _newTime = changeTime(state.value, {\n          hour: action.payload.step\n        });\n\n        if ((state.config.max || state.config.min) && !isValidLimit(state.config, _newTime)) {\n          return state;\n        }\n\n        return Object.assign({}, state, {\n          value: _newTime\n        });\n      }\n\n    case TimepickerActions.CHANGE_MINUTES:\n      {\n        if (!canChangeValue(state.config, action.payload) || !canChangeMinutes(action.payload, state.controls)) {\n          return state;\n        }\n        /** @type {?} */\n\n\n        var _newTime2 = changeTime(state.value, {\n          minute: action.payload.step\n        });\n\n        if ((state.config.max || state.config.min) && !isValidLimit(state.config, _newTime2)) {\n          return state;\n        }\n\n        return Object.assign({}, state, {\n          value: _newTime2\n        });\n      }\n\n    case TimepickerActions.CHANGE_SECONDS:\n      {\n        if (!canChangeValue(state.config, action.payload) || !canChangeSeconds(action.payload, state.controls)) {\n          return state;\n        }\n        /** @type {?} */\n\n\n        var _newTime3 = changeTime(state.value, {\n          seconds: action.payload.step\n        });\n\n        if ((state.config.max || state.config.min) && !isValidLimit(state.config, _newTime3)) {\n          return state;\n        }\n\n        return Object.assign({}, state, {\n          value: _newTime3\n        });\n      }\n\n    case TimepickerActions.SET_TIME_UNIT:\n      {\n        if (!canChangeValue(state.config)) {\n          return state;\n        }\n        /** @type {?} */\n\n\n        var _newTime4 = setTime(state.value, action.payload);\n\n        return Object.assign({}, state, {\n          value: _newTime4\n        });\n      }\n\n    case TimepickerActions.UPDATE_CONTROLS:\n      {\n        /** @type {?} */\n        var _newControlsState = timepickerControls(state.value, action.payload);\n        /** @type {?} */\n\n\n        var _newState = {\n          value: state.value,\n          config: action.payload,\n          controls: _newControlsState\n        };\n\n        if (state.config.showMeridian !== _newState.config.showMeridian) {\n          if (state.value) {\n            _newState.value = new Date(state.value);\n          }\n        }\n\n        return Object.assign({}, state, _newState);\n      }\n\n    default:\n      return state;\n  }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar TimepickerStore = /*#__PURE__*/function (_MiniStore) {\n  function TimepickerStore() {\n    _classCallCheck(this, TimepickerStore);\n\n    /** @type {?} */\n    var _dispatcher = new BehaviorSubject({\n      type: '[mini-ngrx] dispatcher init'\n    });\n    /** @type {?} */\n\n\n    var state = new MiniState(initialState, _dispatcher, timepickerReducer);\n    return _callSuper(this, TimepickerStore, [_dispatcher, timepickerReducer, state]);\n  }\n\n  _inherits(TimepickerStore, _MiniStore);\n\n  return _createClass(TimepickerStore);\n}(MiniStore);\n\nTimepickerStore.ɵfac = function TimepickerStore_Factory(t) {\n  return new (t || TimepickerStore)();\n};\n\nTimepickerStore.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: TimepickerStore,\n  factory: TimepickerStore.ɵfac\n});\n/** @nocollapse */\n\nTimepickerStore.ctorParameters = function () {\n  return [];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TimepickerStore, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar TIMEPICKER_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  function () {\n    return TimepickerComponent;\n  }),\n  multi: true\n};\n\nvar TimepickerComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} _config\n   * @param {?} _cd\n   * @param {?} _store\n   * @param {?} _timepickerActions\n   */\n  function TimepickerComponent(_config, _cd, _store, _timepickerActions) {\n    var _this = this;\n\n    _classCallCheck(this, TimepickerComponent);\n\n    this._cd = _cd;\n    this._store = _store;\n    this._timepickerActions = _timepickerActions;\n    /**\n     * emits true if value is a valid date\n     */\n\n    this.isValid = new EventEmitter(); // min\\max validation for input fields\n\n    this.invalidHours = false;\n    this.invalidMinutes = false;\n    this.invalidSeconds = false; // control value accessor methods\n    // tslint:disable-next-line:no-any\n\n    this.onChange = Function.prototype; // tslint:disable-next-line:no-any\n\n    this.onTouched = Function.prototype;\n    Object.assign(this, _config);\n    this.timepickerSub = _store.select(\n    /**\n    * @param {?} state\n    * @return {?}\n    */\n    function (state) {\n      return state.value;\n    }).subscribe(\n    /**\n    * @param {?} value\n    * @return {?}\n    */\n    function (value) {\n      // update UI values if date changed\n      _this._renderTime(value);\n\n      _this.onChange(value);\n\n      _this._store.dispatch(_this._timepickerActions.updateControls(getControlsValue(_this)));\n    });\n\n    _store.select(\n    /**\n    * @param {?} state\n    * @return {?}\n    */\n    function (state) {\n      return state.controls;\n    }).subscribe(\n    /**\n    * @param {?} controlsState\n    * @return {?}\n    */\n    function (controlsState) {\n      _this.isValid.emit(isInputValid(_this.hours, _this.minutes, _this.seconds, _this.isPM()));\n\n      Object.assign(_this, controlsState);\n\n      _cd.markForCheck();\n    });\n  }\n  /**\n   * @deprecated - please use `isEditable` instead\n   * @return {?}\n   */\n\n\n  return _createClass(TimepickerComponent, [{\n    key: \"isSpinnersVisible\",\n    get: function get() {\n      return this.showSpinners && !this.readonlyInput;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"isEditable\",\n    get: function get() {\n      return !(this.readonlyInput || this.disabled);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"resetValidation\",\n    value: function resetValidation() {\n      this.invalidHours = false;\n      this.invalidMinutes = false;\n      this.invalidSeconds = false;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"isPM\",\n    value: function isPM() {\n      return this.showMeridian && this.meridian === this.meridians[1];\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n\n  }, {\n    key: \"prevDef\",\n    value: function prevDef($event) {\n      $event.preventDefault();\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n\n  }, {\n    key: \"wheelSign\",\n    value: function wheelSign($event) {\n      return Math.sign($event.deltaY) * -1;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this._store.dispatch(this._timepickerActions.updateControls(getControlsValue(this)));\n    }\n    /**\n     * @param {?} step\n     * @param {?=} source\n     * @return {?}\n     */\n\n  }, {\n    key: \"changeHours\",\n    value: function changeHours(step) {\n      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      this.resetValidation();\n\n      this._store.dispatch(this._timepickerActions.changeHours({\n        step: step,\n        source: source\n      }));\n    }\n    /**\n     * @param {?} step\n     * @param {?=} source\n     * @return {?}\n     */\n\n  }, {\n    key: \"changeMinutes\",\n    value: function changeMinutes(step) {\n      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      this.resetValidation();\n\n      this._store.dispatch(this._timepickerActions.changeMinutes({\n        step: step,\n        source: source\n      }));\n    }\n    /**\n     * @param {?} step\n     * @param {?=} source\n     * @return {?}\n     */\n\n  }, {\n    key: \"changeSeconds\",\n    value: function changeSeconds(step) {\n      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      this.resetValidation();\n\n      this._store.dispatch(this._timepickerActions.changeSeconds({\n        step: step,\n        source: source\n      }));\n    }\n    /**\n     * @param {?} hours\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateHours\",\n    value: function updateHours(hours) {\n      this.resetValidation();\n      this.hours = hours;\n      /** @type {?} */\n\n      var isValid = isHourInputValid(this.hours, this.isPM()) && this.isValidLimit();\n\n      if (!isValid) {\n        this.invalidHours = true;\n        this.isValid.emit(false);\n        this.onChange(null);\n        return;\n      }\n\n      this._updateTime();\n    }\n    /**\n     * @param {?} minutes\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateMinutes\",\n    value: function updateMinutes(minutes) {\n      this.resetValidation();\n      this.minutes = minutes;\n      /** @type {?} */\n\n      var isValid = isMinuteInputValid(this.minutes) && this.isValidLimit();\n\n      if (!isValid) {\n        this.invalidMinutes = true;\n        this.isValid.emit(false);\n        this.onChange(null);\n        return;\n      }\n\n      this._updateTime();\n    }\n    /**\n     * @param {?} seconds\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateSeconds\",\n    value: function updateSeconds(seconds) {\n      this.resetValidation();\n      this.seconds = seconds;\n      /** @type {?} */\n\n      var isValid = isSecondInputValid(this.seconds) && this.isValidLimit();\n\n      if (!isValid) {\n        this.invalidSeconds = true;\n        this.isValid.emit(false);\n        this.onChange(null);\n        return;\n      }\n\n      this._updateTime();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"isValidLimit\",\n    value: function isValidLimit() {\n      return isInputLimitValid({\n        hour: this.hours,\n        minute: this.minutes,\n        seconds: this.seconds,\n        isPM: this.isPM()\n      }, this.max, this.min);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateTime\",\n    value: function _updateTime() {\n      /** @type {?} */\n      var _seconds = this.showSeconds ? this.seconds : void 0;\n      /** @type {?} */\n\n\n      var _minutes = this.showMinutes ? this.minutes : void 0;\n\n      if (!isInputValid(this.hours, _minutes, _seconds, this.isPM())) {\n        this.isValid.emit(false);\n        this.onChange(null);\n        return;\n      }\n\n      this._store.dispatch(this._timepickerActions.setTime({\n        hour: this.hours,\n        minute: this.minutes,\n        seconds: this.seconds,\n        isPM: this.isPM()\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggleMeridian\",\n    value: function toggleMeridian() {\n      if (!this.showMeridian || !this.isEditable) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var _hoursPerDayHalf = 12;\n\n      this._store.dispatch(this._timepickerActions.changeHours({\n        step: _hoursPerDayHalf,\n        source: ''\n      }));\n    }\n    /**\n     * Write a new value to the element.\n     * @param {?} obj\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(obj) {\n      if (isValidDate(obj)) {\n        this._store.dispatch(this._timepickerActions.writeValue(parseTime(obj)));\n      } else if (obj == null) {\n        this._store.dispatch(this._timepickerActions.writeValue(null));\n      }\n    }\n    /**\n     * Set the function to be called when the control receives a change event.\n     * @param {?} fn\n     * @return {?}\n     */\n    // tslint:disable-next-line:no-any\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /**\n     * Set the function to be called when the control receives a touch event.\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * This function is called when the control status changes to or from \"disabled\".\n     * Depending on the value, it will enable or disable the appropriate DOM element.\n     *\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n\n      this._cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.timepickerSub.unsubscribe();\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_renderTime\",\n    value: function _renderTime(value) {\n      if (!isValidDate(value)) {\n        this.hours = '';\n        this.minutes = '';\n        this.seconds = '';\n        this.meridian = this.meridians[0];\n        return;\n      }\n      /** @type {?} */\n\n\n      var _value = parseTime(value);\n      /** @type {?} */\n\n\n      var _hoursPerDayHalf = 12;\n      /** @type {?} */\n\n      var _hours = _value.getHours();\n\n      if (this.showMeridian) {\n        this.meridian = this.meridians[_hours >= _hoursPerDayHalf ? 1 : 0];\n        _hours = _hours % _hoursPerDayHalf; // should be 12 PM, not 00 PM\n\n        if (_hours === 0) {\n          _hours = _hoursPerDayHalf;\n        }\n      }\n\n      this.hours = padNumber(_hours);\n      this.minutes = padNumber(_value.getMinutes());\n      this.seconds = padNumber(_value.getUTCSeconds());\n    }\n  }]);\n}();\n\nTimepickerComponent.ɵfac = function TimepickerComponent_Factory(t) {\n  return new (t || TimepickerComponent)(ɵngcc0.ɵɵdirectiveInject(TimepickerConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(TimepickerStore), ɵngcc0.ɵɵdirectiveInject(TimepickerActions));\n};\n\nTimepickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TimepickerComponent,\n  selectors: [[\"timepicker\"]],\n  inputs: {\n    disabled: \"disabled\",\n    hourStep: \"hourStep\",\n    minuteStep: \"minuteStep\",\n    secondsStep: \"secondsStep\",\n    readonlyInput: \"readonlyInput\",\n    mousewheel: \"mousewheel\",\n    arrowkeys: \"arrowkeys\",\n    showSpinners: \"showSpinners\",\n    showMeridian: \"showMeridian\",\n    showMinutes: \"showMinutes\",\n    showSeconds: \"showSeconds\",\n    meridians: \"meridians\",\n    min: \"min\",\n    max: \"max\",\n    hoursPlaceholder: \"hoursPlaceholder\",\n    minutesPlaceholder: \"minutesPlaceholder\",\n    secondsPlaceholder: \"secondsPlaceholder\"\n  },\n  outputs: {\n    isValid: \"isValid\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([TIMEPICKER_CONTROL_VALUE_ACCESSOR, TimepickerStore]), ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 31,\n  vars: 33,\n  consts: [[1, \"text-center\", 3, \"hidden\"], [1, \"btn\", \"btn-link\", 3, \"click\"], [1, \"bs-chevron\", \"bs-chevron-up\"], [4, \"ngIf\"], [1, \"form-group\"], [\"type\", \"text\", \"maxlength\", \"2\", 1, \"form-control\", \"text-center\", \"bs-timepicker-field\", 3, \"placeholder\", \"readonly\", \"disabled\", \"value\", \"wheel\", \"keydown.ArrowUp\", \"keydown.ArrowDown\", \"change\"], [\"class\", \"form-group\", 3, \"has-error\", 4, \"ngIf\"], [1, \"bs-chevron\", \"bs-chevron-down\"], [\"type\", \"button\", 1, \"btn\", \"btn-default\", \"text-center\", 3, \"disabled\", \"click\"]],\n  template: function TimepickerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"table\");\n      ɵngcc0.ɵɵelementStart(1, \"tbody\");\n      ɵngcc0.ɵɵelementStart(2, \"tr\", 0);\n      ɵngcc0.ɵɵelementStart(3, \"td\");\n      ɵngcc0.ɵɵelementStart(4, \"a\", 1);\n      ɵngcc0.ɵɵlistener(\"click\", function TimepickerComponent_Template_a_click_4_listener() {\n        return ctx.changeHours(ctx.hourStep);\n      });\n      ɵngcc0.ɵɵelement(5, \"span\", 2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(6, TimepickerComponent_td_6_Template, 2, 0, \"td\", 3);\n      ɵngcc0.ɵɵtemplate(7, TimepickerComponent_td_7_Template, 3, 2, \"td\", 3);\n      ɵngcc0.ɵɵtemplate(8, TimepickerComponent_td_8_Template, 2, 0, \"td\", 3);\n      ɵngcc0.ɵɵtemplate(9, TimepickerComponent_td_9_Template, 3, 2, \"td\", 3);\n      ɵngcc0.ɵɵtemplate(10, TimepickerComponent_td_10_Template, 2, 0, \"td\", 3);\n      ɵngcc0.ɵɵtemplate(11, TimepickerComponent_td_11_Template, 1, 0, \"td\", 3);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(12, \"tr\");\n      ɵngcc0.ɵɵelementStart(13, \"td\", 4);\n      ɵngcc0.ɵɵelementStart(14, \"input\", 5);\n      ɵngcc0.ɵɵlistener(\"wheel\", function TimepickerComponent_Template_input_wheel_14_listener($event) {\n        ctx.prevDef($event);\n        return ctx.changeHours(ctx.hourStep * ctx.wheelSign($event), \"wheel\");\n      })(\"keydown.ArrowUp\", function TimepickerComponent_Template_input_keydown_ArrowUp_14_listener() {\n        return ctx.changeHours(ctx.hourStep, \"key\");\n      })(\"keydown.ArrowDown\", function TimepickerComponent_Template_input_keydown_ArrowDown_14_listener() {\n        return ctx.changeHours(-ctx.hourStep, \"key\");\n      })(\"change\", function TimepickerComponent_Template_input_change_14_listener($event) {\n        return ctx.updateHours($event.target.value);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(15, TimepickerComponent_td_15_Template, 2, 0, \"td\", 3);\n      ɵngcc0.ɵɵtemplate(16, TimepickerComponent_td_16_Template, 2, 9, \"td\", 6);\n      ɵngcc0.ɵɵtemplate(17, TimepickerComponent_td_17_Template, 2, 0, \"td\", 3);\n      ɵngcc0.ɵɵtemplate(18, TimepickerComponent_td_18_Template, 2, 9, \"td\", 6);\n      ɵngcc0.ɵɵtemplate(19, TimepickerComponent_td_19_Template, 2, 0, \"td\", 3);\n      ɵngcc0.ɵɵtemplate(20, TimepickerComponent_td_20_Template, 3, 4, \"td\", 3);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(21, \"tr\", 0);\n      ɵngcc0.ɵɵelementStart(22, \"td\");\n      ɵngcc0.ɵɵelementStart(23, \"a\", 1);\n      ɵngcc0.ɵɵlistener(\"click\", function TimepickerComponent_Template_a_click_23_listener() {\n        return ctx.changeHours(-ctx.hourStep);\n      });\n      ɵngcc0.ɵɵelement(24, \"span\", 7);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(25, TimepickerComponent_td_25_Template, 2, 0, \"td\", 3);\n      ɵngcc0.ɵɵtemplate(26, TimepickerComponent_td_26_Template, 3, 2, \"td\", 3);\n      ɵngcc0.ɵɵtemplate(27, TimepickerComponent_td_27_Template, 2, 0, \"td\", 3);\n      ɵngcc0.ɵɵtemplate(28, TimepickerComponent_td_28_Template, 3, 2, \"td\", 3);\n      ɵngcc0.ɵɵtemplate(29, TimepickerComponent_td_29_Template, 2, 0, \"td\", 3);\n      ɵngcc0.ɵɵtemplate(30, TimepickerComponent_td_30_Template, 1, 0, \"td\", 3);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"hidden\", !ctx.showSpinners);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassProp(\"disabled\", !ctx.canIncrementHours || !ctx.isEditable);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showMinutes);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showMinutes);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showSeconds);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showSeconds);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showMeridian);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showMeridian);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassProp(\"has-error\", ctx.invalidHours);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵclassProp(\"is-invalid\", ctx.invalidHours);\n      ɵngcc0.ɵɵproperty(\"placeholder\", ctx.hoursPlaceholder)(\"readonly\", ctx.readonlyInput)(\"disabled\", ctx.disabled)(\"value\", ctx.hours);\n      ɵngcc0.ɵɵattribute(\"aria-label\", ctx.labelHours);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showMinutes);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showMinutes);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showSeconds);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showSeconds);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showMeridian);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showMeridian);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"hidden\", !ctx.showSpinners);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassProp(\"disabled\", !ctx.canDecrementHours || !ctx.isEditable);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showMinutes);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showMinutes);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showSeconds);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showSeconds);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showMeridian);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showMeridian);\n    }\n  },\n  directives: [ɵngcc1.NgIf],\n  styles: [\"\\n    .bs-chevron {\\n      border-style: solid;\\n      display: block;\\n      width: 9px;\\n      height: 9px;\\n      position: relative;\\n      border-width: 3px 0px 0 3px;\\n    }\\n\\n    .bs-chevron-up {\\n      -webkit-transform: rotate(45deg);\\n      transform: rotate(45deg);\\n      top: 2px;\\n    }\\n\\n    .bs-chevron-down {\\n      -webkit-transform: rotate(-135deg);\\n      transform: rotate(-135deg);\\n      top: -2px;\\n    }\\n\\n    .bs-timepicker-field {\\n      width: 50px;\\n      padding: .375rem .55rem;\\n    }\\n  \"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nTimepickerComponent.ctorParameters = function () {\n  return [{\n    type: TimepickerConfig\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: TimepickerStore\n  }, {\n    type: TimepickerActions\n  }];\n};\n\nTimepickerComponent.propDecorators = {\n  hourStep: [{\n    type: Input\n  }],\n  minuteStep: [{\n    type: Input\n  }],\n  secondsStep: [{\n    type: Input\n  }],\n  readonlyInput: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  mousewheel: [{\n    type: Input\n  }],\n  arrowkeys: [{\n    type: Input\n  }],\n  showSpinners: [{\n    type: Input\n  }],\n  showMeridian: [{\n    type: Input\n  }],\n  showMinutes: [{\n    type: Input\n  }],\n  showSeconds: [{\n    type: Input\n  }],\n  meridians: [{\n    type: Input\n  }],\n  min: [{\n    type: Input\n  }],\n  max: [{\n    type: Input\n  }],\n  hoursPlaceholder: [{\n    type: Input\n  }],\n  minutesPlaceholder: [{\n    type: Input\n  }],\n  secondsPlaceholder: [{\n    type: Input\n  }],\n  isValid: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TimepickerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'timepicker',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [TIMEPICKER_CONTROL_VALUE_ACCESSOR, TimepickerStore],\n      template: \"<table>\\n  <tbody>\\n  <tr class=\\\"text-center\\\" [hidden]=\\\"!showSpinners\\\">\\n    <!-- increment hours button-->\\n    <td>\\n      <a class=\\\"btn btn-link\\\" [class.disabled]=\\\"!canIncrementHours || !isEditable\\\"\\n         (click)=\\\"changeHours(hourStep)\\\"\\n      ><span class=\\\"bs-chevron bs-chevron-up\\\"></span></a>\\n    </td>\\n    <!-- divider -->\\n    <td *ngIf=\\\"showMinutes\\\">&nbsp;&nbsp;&nbsp;</td>\\n    <!-- increment minutes button -->\\n    <td *ngIf=\\\"showMinutes\\\">\\n      <a class=\\\"btn btn-link\\\" [class.disabled]=\\\"!canIncrementMinutes || !isEditable\\\"\\n         (click)=\\\"changeMinutes(minuteStep)\\\"\\n      ><span class=\\\"bs-chevron bs-chevron-up\\\"></span></a>\\n    </td>\\n    <!-- divider -->\\n    <td *ngIf=\\\"showSeconds\\\">&nbsp;</td>\\n    <!-- increment seconds button -->\\n    <td *ngIf=\\\"showSeconds\\\">\\n      <a class=\\\"btn btn-link\\\" [class.disabled]=\\\"!canIncrementSeconds || !isEditable\\\"\\n         (click)=\\\"changeSeconds(secondsStep)\\\">\\n        <span class=\\\"bs-chevron bs-chevron-up\\\"></span>\\n      </a>\\n    </td>\\n    <!-- space between -->\\n    <td *ngIf=\\\"showMeridian\\\">&nbsp;&nbsp;&nbsp;</td>\\n    <!-- meridian placeholder-->\\n    <td *ngIf=\\\"showMeridian\\\"></td>\\n  </tr>\\n  <tr>\\n    <!-- hours -->\\n    <td class=\\\"form-group\\\" [class.has-error]=\\\"invalidHours\\\">\\n      <input type=\\\"text\\\" [class.is-invalid]=\\\"invalidHours\\\"\\n             class=\\\"form-control text-center bs-timepicker-field\\\"\\n             [placeholder]=\\\"hoursPlaceholder\\\"\\n             maxlength=\\\"2\\\"\\n             [readonly]=\\\"readonlyInput\\\"\\n             [disabled]=\\\"disabled\\\"\\n             [value]=\\\"hours\\\"\\n             (wheel)=\\\"prevDef($event);changeHours(hourStep * wheelSign($event), 'wheel')\\\"\\n             (keydown.ArrowUp)=\\\"changeHours(hourStep, 'key')\\\"\\n             (keydown.ArrowDown)=\\\"changeHours(-hourStep, 'key')\\\"\\n             (change)=\\\"updateHours($event.target.value)\\\" [attr.aria-label]=\\\"labelHours\\\"></td>\\n    <!-- divider -->\\n    <td *ngIf=\\\"showMinutes\\\">&nbsp;:&nbsp;</td>\\n    <!-- minutes -->\\n    <td class=\\\"form-group\\\" *ngIf=\\\"showMinutes\\\" [class.has-error]=\\\"invalidMinutes\\\">\\n      <input type=\\\"text\\\" [class.is-invalid]=\\\"invalidMinutes\\\"\\n             class=\\\"form-control text-center bs-timepicker-field\\\"\\n             [placeholder]=\\\"minutesPlaceholder\\\"\\n             maxlength=\\\"2\\\"\\n             [readonly]=\\\"readonlyInput\\\"\\n             [disabled]=\\\"disabled\\\"\\n             [value]=\\\"minutes\\\"\\n             (wheel)=\\\"prevDef($event);changeMinutes(minuteStep * wheelSign($event), 'wheel')\\\"\\n             (keydown.ArrowUp)=\\\"changeMinutes(minuteStep, 'key')\\\"\\n             (keydown.ArrowDown)=\\\"changeMinutes(-minuteStep, 'key')\\\"\\n             (change)=\\\"updateMinutes($event.target.value)\\\" [attr.aria-label]=\\\"labelMinutes\\\">\\n    </td>\\n    <!-- divider -->\\n    <td *ngIf=\\\"showSeconds\\\">&nbsp;:&nbsp;</td>\\n    <!-- seconds -->\\n    <td class=\\\"form-group\\\" *ngIf=\\\"showSeconds\\\" [class.has-error]=\\\"invalidSeconds\\\">\\n      <input type=\\\"text\\\" [class.is-invalid]=\\\"invalidSeconds\\\"\\n             class=\\\"form-control text-center bs-timepicker-field\\\"\\n             [placeholder]=\\\"secondsPlaceholder\\\"\\n             maxlength=\\\"2\\\"\\n             [readonly]=\\\"readonlyInput\\\"\\n             [disabled]=\\\"disabled\\\"\\n             [value]=\\\"seconds\\\"\\n             (wheel)=\\\"prevDef($event);changeSeconds(secondsStep * wheelSign($event), 'wheel')\\\"\\n             (keydown.ArrowUp)=\\\"changeSeconds(secondsStep, 'key')\\\"\\n             (keydown.ArrowDown)=\\\"changeSeconds(-secondsStep, 'key')\\\"\\n             (change)=\\\"updateSeconds($event.target.value)\\\" [attr.aria-label]=\\\"labelSeconds\\\">\\n    </td>\\n    <!-- space between -->\\n    <td *ngIf=\\\"showMeridian\\\">&nbsp;&nbsp;&nbsp;</td>\\n    <!-- meridian -->\\n    <td *ngIf=\\\"showMeridian\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-default text-center\\\"\\n              [disabled]=\\\"!isEditable || !canToggleMeridian\\\"\\n              [class.disabled]=\\\"!isEditable || !canToggleMeridian\\\"\\n              (click)=\\\"toggleMeridian()\\\"\\n      >{{ meridian }}\\n      </button>\\n    </td>\\n  </tr>\\n  <tr class=\\\"text-center\\\" [hidden]=\\\"!showSpinners\\\">\\n    <!-- decrement hours button-->\\n    <td>\\n      <a class=\\\"btn btn-link\\\" [class.disabled]=\\\"!canDecrementHours || !isEditable\\\"\\n         (click)=\\\"changeHours(-hourStep)\\\">\\n        <span class=\\\"bs-chevron bs-chevron-down\\\"></span>\\n      </a>\\n    </td>\\n    <!-- divider -->\\n    <td *ngIf=\\\"showMinutes\\\">&nbsp;&nbsp;&nbsp;</td>\\n    <!-- decrement minutes button-->\\n    <td *ngIf=\\\"showMinutes\\\">\\n      <a class=\\\"btn btn-link\\\" [class.disabled]=\\\"!canDecrementMinutes || !isEditable\\\"\\n         (click)=\\\"changeMinutes(-minuteStep)\\\">\\n        <span class=\\\"bs-chevron bs-chevron-down\\\"></span>\\n      </a>\\n    </td>\\n    <!-- divider -->\\n    <td *ngIf=\\\"showSeconds\\\">&nbsp;</td>\\n    <!-- decrement seconds button-->\\n    <td *ngIf=\\\"showSeconds\\\">\\n      <a class=\\\"btn btn-link\\\" [class.disabled]=\\\"!canDecrementSeconds || !isEditable\\\"\\n         (click)=\\\"changeSeconds(-secondsStep)\\\">\\n        <span class=\\\"bs-chevron bs-chevron-down\\\"></span>\\n      </a>\\n    </td>\\n    <!-- space between -->\\n    <td *ngIf=\\\"showMeridian\\\">&nbsp;&nbsp;&nbsp;</td>\\n    <!-- meridian placeholder-->\\n    <td *ngIf=\\\"showMeridian\\\"></td>\\n  </tr>\\n  </tbody>\\n</table>\\n\",\n      encapsulation: ViewEncapsulation.None,\n      styles: [\"\\n    .bs-chevron {\\n      border-style: solid;\\n      display: block;\\n      width: 9px;\\n      height: 9px;\\n      position: relative;\\n      border-width: 3px 0px 0 3px;\\n    }\\n\\n    .bs-chevron-up {\\n      -webkit-transform: rotate(45deg);\\n      transform: rotate(45deg);\\n      top: 2px;\\n    }\\n\\n    .bs-chevron-down {\\n      -webkit-transform: rotate(-135deg);\\n      transform: rotate(-135deg);\\n      top: -2px;\\n    }\\n\\n    .bs-timepicker-field {\\n      width: 50px;\\n      padding: .375rem .55rem;\\n    }\\n  \"]\n    }]\n  }], function () {\n    return [{\n      type: TimepickerConfig\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: TimepickerStore\n    }, {\n      type: TimepickerActions\n    }];\n  }, {\n    isValid: [{\n      type: Output\n    }],\n    disabled: [{\n      type: Input\n    }],\n    hourStep: [{\n      type: Input\n    }],\n    minuteStep: [{\n      type: Input\n    }],\n    secondsStep: [{\n      type: Input\n    }],\n    readonlyInput: [{\n      type: Input\n    }],\n    mousewheel: [{\n      type: Input\n    }],\n    arrowkeys: [{\n      type: Input\n    }],\n    showSpinners: [{\n      type: Input\n    }],\n    showMeridian: [{\n      type: Input\n    }],\n    showMinutes: [{\n      type: Input\n    }],\n    showSeconds: [{\n      type: Input\n    }],\n    meridians: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    hoursPlaceholder: [{\n      type: Input\n    }],\n    minutesPlaceholder: [{\n      type: Input\n    }],\n    secondsPlaceholder: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /**\n   * hours change step\n   * @type {?}\n   */\n  TimepickerComponent.prototype.hourStep;\n  /**\n   * minutes change step\n   * @type {?}\n   */\n\n  TimepickerComponent.prototype.minuteStep;\n  /**\n   * seconds change step\n   * @type {?}\n   */\n\n  TimepickerComponent.prototype.secondsStep;\n  /**\n   * if true hours and minutes fields will be readonly\n   * @type {?}\n   */\n\n  TimepickerComponent.prototype.readonlyInput;\n  /**\n   * if true hours and minutes fields will be disabled\n   * @type {?}\n   */\n\n  TimepickerComponent.prototype.disabled;\n  /**\n   * if true scroll inside hours and minutes inputs will change time\n   * @type {?}\n   */\n\n  TimepickerComponent.prototype.mousewheel;\n  /**\n   * if true the values of hours and minutes can be changed using the up/down arrow keys on the keyboard\n   * @type {?}\n   */\n\n  TimepickerComponent.prototype.arrowkeys;\n  /**\n   * if true spinner arrows above and below the inputs will be shown\n   * @type {?}\n   */\n\n  TimepickerComponent.prototype.showSpinners;\n  /**\n   * if true meridian button will be shown\n   * @type {?}\n   */\n\n  TimepickerComponent.prototype.showMeridian;\n  /**\n   * show minutes in timepicker\n   * @type {?}\n   */\n\n  TimepickerComponent.prototype.showMinutes;\n  /**\n   * show seconds in timepicker\n   * @type {?}\n   */\n\n  TimepickerComponent.prototype.showSeconds;\n  /**\n   * meridian labels based on locale\n   * @type {?}\n   */\n\n  TimepickerComponent.prototype.meridians;\n  /**\n   * minimum time user can select\n   * @type {?}\n   */\n\n  TimepickerComponent.prototype.min;\n  /**\n   * maximum time user can select\n   * @type {?}\n   */\n\n  TimepickerComponent.prototype.max;\n  /**\n   * placeholder for hours field in timepicker\n   * @type {?}\n   */\n\n  TimepickerComponent.prototype.hoursPlaceholder;\n  /**\n   * placeholder for minutes field in timepicker\n   * @type {?}\n   */\n\n  TimepickerComponent.prototype.minutesPlaceholder;\n  /**\n   * placeholder for seconds field in timepicker\n   * @type {?}\n   */\n\n  TimepickerComponent.prototype.secondsPlaceholder;\n  /**\n   * emits true if value is a valid date\n   * @type {?}\n   */\n\n  TimepickerComponent.prototype.isValid;\n  /** @type {?} */\n\n  TimepickerComponent.prototype.hours;\n  /** @type {?} */\n\n  TimepickerComponent.prototype.minutes;\n  /** @type {?} */\n\n  TimepickerComponent.prototype.seconds;\n  /** @type {?} */\n\n  TimepickerComponent.prototype.meridian;\n  /** @type {?} */\n\n  TimepickerComponent.prototype.invalidHours;\n  /** @type {?} */\n\n  TimepickerComponent.prototype.invalidMinutes;\n  /** @type {?} */\n\n  TimepickerComponent.prototype.invalidSeconds;\n  /** @type {?} */\n\n  TimepickerComponent.prototype.labelHours;\n  /** @type {?} */\n\n  TimepickerComponent.prototype.labelMinutes;\n  /** @type {?} */\n\n  TimepickerComponent.prototype.labelSeconds;\n  /** @type {?} */\n\n  TimepickerComponent.prototype.canIncrementHours;\n  /** @type {?} */\n\n  TimepickerComponent.prototype.canIncrementMinutes;\n  /** @type {?} */\n\n  TimepickerComponent.prototype.canIncrementSeconds;\n  /** @type {?} */\n\n  TimepickerComponent.prototype.canDecrementHours;\n  /** @type {?} */\n\n  TimepickerComponent.prototype.canDecrementMinutes;\n  /** @type {?} */\n\n  TimepickerComponent.prototype.canDecrementSeconds;\n  /** @type {?} */\n\n  TimepickerComponent.prototype.canToggleMeridian;\n  /** @type {?} */\n\n  TimepickerComponent.prototype.onChange;\n  /** @type {?} */\n\n  TimepickerComponent.prototype.onTouched;\n  /** @type {?} */\n\n  TimepickerComponent.prototype.timepickerSub;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TimepickerComponent.prototype._cd;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TimepickerComponent.prototype._store;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TimepickerComponent.prototype._timepickerActions;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar TimepickerModule = /*#__PURE__*/function () {\n  function TimepickerModule() {\n    _classCallCheck(this, TimepickerModule);\n  }\n\n  return _createClass(TimepickerModule, null, [{\n    key: \"forRoot\",\n    value:\n    /**\n     * @return {?}\n     */\n    function forRoot() {\n      return {\n        ngModule: TimepickerModule,\n        providers: [TimepickerActions, TimepickerStore]\n      };\n    }\n  }]);\n}();\n\nTimepickerModule.ɵfac = function TimepickerModule_Factory(t) {\n  return new (t || TimepickerModule)();\n};\n\nTimepickerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: TimepickerModule\n});\nTimepickerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TimepickerModule, {\n    declarations: function declarations() {\n      return [TimepickerComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [TimepickerComponent];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TimepickerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [TimepickerComponent],\n      exports: [TimepickerComponent]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { TimepickerActions, TimepickerComponent, TimepickerConfig, TimepickerModule, TimepickerStore, TIMEPICKER_CONTROL_VALUE_ACCESSOR as ɵa }; //# sourceMappingURL=ngx-bootstrap-timepicker.js.map","map":null,"metadata":{},"sourceType":"module"}