{"ast":null,"code":"\"use strict\";\n\nmodule.exports = TreeWalker;\n\nvar Node = require('./Node');\n\nvar NodeFilter = require('./NodeFilter');\n\nvar NodeTraversal = require('./NodeTraversal');\n\nvar utils = require('./utils');\n\nvar mapChild = {\n  first: 'firstChild',\n  last: 'lastChild',\n  next: 'firstChild',\n  previous: 'lastChild'\n};\nvar mapSibling = {\n  first: 'nextSibling',\n  last: 'previousSibling',\n  next: 'nextSibling',\n  previous: 'previousSibling'\n};\n/* Private methods and helpers */\n\n/**\n * @spec https://dom.spec.whatwg.org/#concept-traverse-children\n * @method\n * @access private\n * @param {TreeWalker} tw\n * @param {string} type One of 'first' or 'last'.\n * @return {Node|null}\n */\n\nfunction traverseChildren(tw, type) {\n  var child, node, parent, result, sibling;\n  node = tw._currentNode[mapChild[type]];\n\n  while (node !== null) {\n    result = tw._internalFilter(node);\n\n    if (result === NodeFilter.FILTER_ACCEPT) {\n      tw._currentNode = node;\n      return node;\n    }\n\n    if (result === NodeFilter.FILTER_SKIP) {\n      child = node[mapChild[type]];\n\n      if (child !== null) {\n        node = child;\n        continue;\n      }\n    }\n\n    while (node !== null) {\n      sibling = node[mapSibling[type]];\n\n      if (sibling !== null) {\n        node = sibling;\n        break;\n      }\n\n      parent = node.parentNode;\n\n      if (parent === null || parent === tw.root || parent === tw._currentNode) {\n        return null;\n      } else {\n        node = parent;\n      }\n    }\n  }\n\n  return null;\n}\n/**\n * @spec https://dom.spec.whatwg.org/#concept-traverse-siblings\n * @method\n * @access private\n * @param {TreeWalker} tw\n * @param {TreeWalker} type One of 'next' or 'previous'.\n * @return {Node|nul}\n */\n\n\nfunction traverseSiblings(tw, type) {\n  var node, result, sibling;\n  node = tw._currentNode;\n\n  if (node === tw.root) {\n    return null;\n  }\n\n  while (true) {\n    sibling = node[mapSibling[type]];\n\n    while (sibling !== null) {\n      node = sibling;\n      result = tw._internalFilter(node);\n\n      if (result === NodeFilter.FILTER_ACCEPT) {\n        tw._currentNode = node;\n        return node;\n      }\n\n      sibling = node[mapChild[type]];\n\n      if (result === NodeFilter.FILTER_REJECT || sibling === null) {\n        sibling = node[mapSibling[type]];\n      }\n    }\n\n    node = node.parentNode;\n\n    if (node === null || node === tw.root) {\n      return null;\n    }\n\n    if (tw._internalFilter(node) === NodeFilter.FILTER_ACCEPT) {\n      return null;\n    }\n  }\n}\n/* Public API */\n\n/**\n * Latest version: https://dom.spec.whatwg.org/#treewalker\n *\n * @constructor\n * @param {Node} root\n * @param {number} whatToShow [optional]\n * @param {Function|NodeFilter} filter [optional]\n * @throws Error\n */\n\n\nfunction TreeWalker(root, whatToShow, filter) {\n  if (!root || !root.nodeType) {\n    utils.NotSupportedError();\n  } // Read-only properties\n\n\n  this._root = root;\n  this._whatToShow = Number(whatToShow) || 0;\n  this._filter = filter || null;\n  this._active = false; // Read-write property\n\n  this._currentNode = root;\n}\n\nObject.defineProperties(TreeWalker.prototype, {\n  root: {\n    get: function get() {\n      return this._root;\n    }\n  },\n  whatToShow: {\n    get: function get() {\n      return this._whatToShow;\n    }\n  },\n  filter: {\n    get: function get() {\n      return this._filter;\n    }\n  },\n  currentNode: {\n    get: function currentNode() {\n      return this._currentNode;\n    },\n    set: function setCurrentNode(v) {\n      if (!(v instanceof Node)) {\n        throw new TypeError(\"Not a Node\"); // `null` is also not a node\n      }\n\n      this._currentNode = v;\n    }\n  },\n\n  /**\n   * @method\n   * @param {Node} node\n   * @return {Number} Constant NodeFilter.FILTER_ACCEPT,\n   *  NodeFilter.FILTER_REJECT or NodeFilter.FILTER_SKIP.\n   */\n  _internalFilter: {\n    value: function _internalFilter(node) {\n      /* jshint bitwise: false */\n      var result, filter;\n\n      if (this._active) {\n        utils.InvalidStateError();\n      } // Maps nodeType to whatToShow\n\n\n      if (!(1 << node.nodeType - 1 & this._whatToShow)) {\n        return NodeFilter.FILTER_SKIP;\n      }\n\n      filter = this._filter;\n\n      if (filter === null) {\n        result = NodeFilter.FILTER_ACCEPT;\n      } else {\n        this._active = true;\n\n        try {\n          if (typeof filter === 'function') {\n            result = filter(node);\n          } else {\n            result = filter.acceptNode(node);\n          }\n        } finally {\n          this._active = false;\n        }\n      } // Note that coercing to a number means that\n      //  `true` becomes `1` (which is NodeFilter.FILTER_ACCEPT)\n      //  `false` becomes `0` (neither accept, reject, or skip)\n\n\n      return +result;\n    }\n  },\n\n  /**\n   * @spec https://dom.spec.whatwg.org/#dom-treewalker-parentnode\n   * @based on WebKit's TreeWalker::parentNode\n   * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/dom/TreeWalker.cpp?rev=220453#L50\n   * @method\n   * @return {Node|null}\n   */\n  parentNode: {\n    value: function parentNode() {\n      var node = this._currentNode;\n\n      while (node !== this.root) {\n        node = node.parentNode;\n\n        if (node === null) {\n          return null;\n        }\n\n        if (this._internalFilter(node) === NodeFilter.FILTER_ACCEPT) {\n          this._currentNode = node;\n          return node;\n        }\n      }\n\n      return null;\n    }\n  },\n\n  /**\n   * @spec https://dom.spec.whatwg.org/#dom-treewalker-firstchild\n   * @method\n   * @return {Node|null}\n   */\n  firstChild: {\n    value: function firstChild() {\n      return traverseChildren(this, 'first');\n    }\n  },\n\n  /**\n   * @spec https://dom.spec.whatwg.org/#dom-treewalker-lastchild\n   * @method\n   * @return {Node|null}\n   */\n  lastChild: {\n    value: function lastChild() {\n      return traverseChildren(this, 'last');\n    }\n  },\n\n  /**\n   * @spec http://www.w3.org/TR/dom/#dom-treewalker-previoussibling\n   * @method\n   * @return {Node|null}\n   */\n  previousSibling: {\n    value: function previousSibling() {\n      return traverseSiblings(this, 'previous');\n    }\n  },\n\n  /**\n   * @spec http://www.w3.org/TR/dom/#dom-treewalker-nextsibling\n   * @method\n   * @return {Node|null}\n   */\n  nextSibling: {\n    value: function nextSibling() {\n      return traverseSiblings(this, 'next');\n    }\n  },\n\n  /**\n   * @spec https://dom.spec.whatwg.org/#dom-treewalker-previousnode\n   * @based on WebKit's TreeWalker::previousNode\n   * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/dom/TreeWalker.cpp?rev=220453#L181\n   * @method\n   * @return {Node|null}\n   */\n  previousNode: {\n    value: function previousNode() {\n      var node, result, previousSibling, lastChild;\n      node = this._currentNode;\n\n      while (node !== this._root) {\n        for (previousSibling = node.previousSibling; previousSibling; previousSibling = node.previousSibling) {\n          node = previousSibling;\n          result = this._internalFilter(node);\n\n          if (result === NodeFilter.FILTER_REJECT) {\n            continue;\n          }\n\n          for (lastChild = node.lastChild; lastChild; lastChild = node.lastChild) {\n            node = lastChild;\n            result = this._internalFilter(node);\n\n            if (result === NodeFilter.FILTER_REJECT) {\n              break;\n            }\n          }\n\n          if (result === NodeFilter.FILTER_ACCEPT) {\n            this._currentNode = node;\n            return node;\n          }\n        }\n\n        if (node === this.root || node.parentNode === null) {\n          return null;\n        }\n\n        node = node.parentNode;\n\n        if (this._internalFilter(node) === NodeFilter.FILTER_ACCEPT) {\n          this._currentNode = node;\n          return node;\n        }\n      }\n\n      return null;\n    }\n  },\n\n  /**\n   * @spec https://dom.spec.whatwg.org/#dom-treewalker-nextnode\n   * @based on WebKit's TreeWalker::nextNode\n   * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/dom/TreeWalker.cpp?rev=220453#L228\n   * @method\n   * @return {Node|null}\n   */\n  nextNode: {\n    value: function nextNode() {\n      var node, result, firstChild, nextSibling;\n      node = this._currentNode;\n      result = NodeFilter.FILTER_ACCEPT;\n\n      CHILDREN: while (true) {\n        for (firstChild = node.firstChild; firstChild; firstChild = node.firstChild) {\n          node = firstChild;\n          result = this._internalFilter(node);\n\n          if (result === NodeFilter.FILTER_ACCEPT) {\n            this._currentNode = node;\n            return node;\n          } else if (result === NodeFilter.FILTER_REJECT) {\n            break;\n          }\n        }\n\n        for (nextSibling = NodeTraversal.nextSkippingChildren(node, this.root); nextSibling; nextSibling = NodeTraversal.nextSkippingChildren(node, this.root)) {\n          node = nextSibling;\n          result = this._internalFilter(node);\n\n          if (result === NodeFilter.FILTER_ACCEPT) {\n            this._currentNode = node;\n            return node;\n          } else if (result === NodeFilter.FILTER_SKIP) {\n            continue CHILDREN;\n          }\n        }\n\n        return null;\n      }\n    }\n  },\n\n  /** For compatibility with web-platform-tests. */\n  toString: {\n    value: function toString() {\n      return \"[object TreeWalker]\";\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"script"}